
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00005910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0000591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004920  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          000012e8  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001364  20001364  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a98e  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7a  00000000  00000000  00010a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  000125b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067f  00000000  00000000  00012e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b74  00000000  00000000  000134b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7cc  00000000  00000000  0001502b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000babb7  00000000  00000000  0001f7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da3ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002758  00000000  00000000  000da3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000dcb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004884 	.word	0x08004884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004884 	.word	0x08004884

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	81fb      	strh	r3, [r7, #14]
	uint16_t Consecutive_Cntr = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fd65 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f873 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f9b1 	bl	80008dc <MX_GPIO_Init>
  MX_CAN1_Init();
 800057a:	f000 f8d9 	bl	8000730 <MX_CAN1_Init>
  MX_CAN2_Init();
 800057e:	f000 f92d 	bl	80007dc <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000582:	f000 f981 	bl	8000888 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000586:	f000 fa51 	bl	8000a2c <MX_CAN1_Setup>
  MX_CAN2_Setup();
 800058a:	f000 fa63 	bl	8000a54 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800058e:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <main+0xd8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <main+0xd8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0220 	orr.w	r2, r2, #32
 800059c:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Example Function to print can message via uart
  PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <main+0xdc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4926      	ldr	r1, [pc, #152]	@ (8000640 <main+0xe0>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa82 	bl	8000ab0 <PrintCANLog>



    CAN1_pHeader.DLC = 8;
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <main+0xdc>)
 80005ae:	2208      	movs	r2, #8
 80005b0:	611a      	str	r2, [r3, #16]
    CAN1_pHeader.IDE = CAN_ID_STD;
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <main+0xdc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
    CAN1_pHeader.RTR = CAN_RTR_DATA;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <main+0xdc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
    CAN1_pHeader.StdId = 0x030;
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <main+0xdc>)
 80005c0:	2230      	movs	r2, #48	@ 0x30
 80005c2:	601a      	str	r2, [r3, #0]
    CAN1_pHeader.ExtId = 0x02;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <main+0xdc>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
    CAN1_pHeader.TransmitGlobalTime = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <main+0xdc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	751a      	strb	r2, [r3, #20]


    CAN2_pHeader.DLC = 8;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <main+0xe4>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.IDE = CAN_ID_STD;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <main+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.RTR = CAN_RTR_DATA;
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <main+0xe4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.StdId = 0x030;
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <main+0xe4>)
 80005e4:	2230      	movs	r2, #48	@ 0x30
 80005e6:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.ExtId = 0x02;
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <main+0xe4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	605a      	str	r2, [r3, #4]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <main+0xe4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	751a      	strb	r2, [r3, #20]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <main+0xe8>)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fc:	e883 0003 	stmia.w	r3, {r0, r1}
//		  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
//	  }
//	  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, canRX) == HAL_OK) {
//		  HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
//	  }
	  HAL_CAN_AddTxMessage(&hcan1,&CAN1_pHeader,csend,&CAN1_pTxMailbox);
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <main+0xec>)
 8000604:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0xdc>)
 8000606:	4812      	ldr	r0, [pc, #72]	@ (8000650 <main+0xf0>)
 8000608:	f000 ffce 	bl	80015a8 <HAL_CAN_AddTxMessage>
	  PrintCANLog(CAN2_pHeader.StdId, &CAN2_DATA_RX[0]);
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <main+0xe4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4910      	ldr	r1, [pc, #64]	@ (8000654 <main+0xf4>)
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fa4b 	bl	8000ab0 <PrintCANLog>
//	  HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
	  if (CAN2_DATA_RX[0]==csend[0]) {
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <main+0xf4>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	793b      	ldrb	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	d103      	bne.n	800062c <main+0xcc>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000624:	2101      	movs	r1, #1
 8000626:	480c      	ldr	r0, [pc, #48]	@ (8000658 <main+0xf8>)
 8000628:	f001 ff5f 	bl	80024ea <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000630:	f000 fd76 	bl	8001120 <HAL_Delay>
  {
 8000634:	e7de      	b.n	80005f4 <main+0x94>
 8000636:	bf00      	nop
 8000638:	200000e8 	.word	0x200000e8
 800063c:	20000130 	.word	0x20000130
 8000640:	200011f4 	.word	0x200011f4
 8000644:	2000018c 	.word	0x2000018c
 8000648:	0800489c 	.word	0x0800489c
 800064c:	200001e8 	.word	0x200001e8
 8000650:	20000098 	.word	0x20000098
 8000654:	20001204 	.word	0x20001204
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fc8a 	bl	8003f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	@ 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ff41 	bl	8002568 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fa8e 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f002 f9a2 	bl	8002a58 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 fa77 	bl	8000c0c <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000736:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <MX_CAN1_Init+0xa4>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 800073c:	2215      	movs	r2, #21
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 800074e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000756:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800075a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_CAN1_Init+0xa0>)
 8000782:	f000 fcf1 	bl	8001168 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 fa3e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN1_sFilterConfig.FilterBank = 0;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.FilterIdHigh = 0;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0;
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007bc:	2201      	movs	r2, #1
 80007be:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.FilterActivation = ENABLE;
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 80007c6:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <MX_CAN1_Init+0xa8>)
 80007c8:	220e      	movs	r2, #14
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000098 	.word	0x20000098
 80007d4:	40006400 	.word	0x40006400
 80007d8:	20000164 	.word	0x20000164

080007dc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_CAN2_Init+0xa0>)
 80007e2:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <MX_CAN2_Init+0xa4>)
 80007e4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_CAN2_Init+0xa0>)
 80007e8:	2215      	movs	r2, #21
 80007ea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_CAN2_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_CAN2_Init+0xa0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <MX_CAN2_Init+0xa0>)
 80007fa:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80007fe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_CAN2_Init+0xa0>)
 8000802:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000806:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_CAN2_Init+0xa0>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <MX_CAN2_Init+0xa0>)
 8000810:	2200      	movs	r2, #0
 8000812:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_CAN2_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_CAN2_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_CAN2_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_CAN2_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	@ (800087c <MX_CAN2_Init+0xa0>)
 800082e:	f000 fc9b 	bl	8001168 <HAL_CAN_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f9e8 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN2_sFilterConfig.FilterBank = 14;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_CAN2_Init+0xa8>)
 800083e:	220e      	movs	r2, #14
 8000840:	615a      	str	r2, [r3, #20]
  CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  CAN2_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_CAN2_Init+0xa8>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  CAN2_sFilterConfig.FilterIdHigh = 0;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  CAN2_sFilterConfig.FilterIdLow = 0;
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  CAN2_sFilterConfig.FilterMaskIdHigh = 0;
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_CAN2_Init+0xa8>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  CAN2_sFilterConfig.FilterMaskIdLow = 0;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  CAN2_sFilterConfig.FilterActivation = ENABLE;
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <MX_CAN2_Init+0xa8>)
 800086e:	2201      	movs	r2, #1
 8000870:	621a      	str	r2, [r3, #32]
  CAN2_sFilterConfig.SlaveStartFilterBank = 14;
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <MX_CAN2_Init+0xa8>)
 8000874:	220e      	movs	r2, #14
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000c0 	.word	0x200000c0
 8000880:	40006800 	.word	0x40006800
 8000884:	200001c0 	.word	0x200001c0

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <MX_USART3_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008c0:	f002 faea 	bl	8002e98 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f99f 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000e8 	.word	0x200000e8
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b3d      	ldr	r3, [pc, #244]	@ (80009ec <MX_GPIO_Init+0x110>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a3c      	ldr	r2, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x110>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b3a      	ldr	r3, [pc, #232]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a35      	ldr	r2, [pc, #212]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b2f      	ldr	r3, [pc, #188]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a2e      	ldr	r2, [pc, #184]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <MX_GPIO_Init+0x110>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <MX_GPIO_Init+0x110>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a27      	ldr	r2, [pc, #156]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <MX_GPIO_Init+0x110>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2107      	movs	r1, #7
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000968:	f001 fda6 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800096c:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8000970:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <MX_GPIO_Init+0x118>)
 8000982:	f001 fbfd 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <MX_GPIO_Init+0x11c>)
 800099c:	f001 fbf0 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <MX_GPIO_Init+0x11c>)
 80009b4:	f001 fbe4 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED_1_Pin|LED_2_Pin;
 80009b8:	2307      	movs	r3, #7
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <MX_GPIO_Init+0x114>)
 80009d0:	f001 fbd6 	bl	8002180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	2006      	movs	r0, #6
 80009da:	f001 fb08 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009de:	2006      	movs	r0, #6
 80009e0:	f001 fb21 	bl	8002026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000

080009fc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000a06:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 fe9c 	bl	8001748 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000a10:	2102      	movs	r1, #2
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000a14:	f001 fd69 	bl	80024ea <HAL_GPIO_TogglePin>

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20001204 	.word	0x20001204
 8000a24:	200001a4 	.word	0x200001a4
 8000a28:	40020400 	.word	0x40020400

08000a2c <MX_CAN1_Setup>:

void MX_CAN1_Setup()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000a30:	4906      	ldr	r1, [pc, #24]	@ (8000a4c <MX_CAN1_Setup+0x20>)
 8000a32:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a34:	f000 fc94 	bl	8001360 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a3a:	f000 fd71 	bl	8001520 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a42:	f000 ffa3 	bl	800198c <HAL_CAN_ActivateNotification>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000164 	.word	0x20000164
 8000a50:	20000098 	.word	0x20000098

08000a54 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000a58:	4906      	ldr	r1, [pc, #24]	@ (8000a74 <MX_CAN2_Setup+0x20>)
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a5c:	f000 fc80 	bl	8001360 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a62:	f000 fd5d 	bl	8001520 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a66:	2102      	movs	r1, #2
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a6a:	f000 ff8f 	bl	800198c <HAL_CAN_ActivateNotification>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001c0 	.word	0x200001c0
 8000a78:	200000c0 	.word	0x200000c0

08000a7c <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000a84:	e009      	b.n	8000a9a <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	4807      	ldr	r0, [pc, #28]	@ (8000aac <USART3_SendString+0x30>)
 8000a90:	f002 fa52 	bl	8002f38 <HAL_UART_Transmit>
      ch++;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f1      	bne.n	8000a86 <USART3_SendString+0xa>
   }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000e8 	.word	0x200000e8

08000ab0 <PrintCANLog>:
	}
	return crc;
}

void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 8000ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb0 <PrintCANLog+0x100>)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	3302      	adds	r3, #2
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 8000ad2:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000ad6:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 8000ad8:	4a36      	ldr	r2, [pc, #216]	@ (8000bb4 <PrintCANLog+0x104>)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae2:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 8000ae6:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <PrintCANLog+0x108>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4933      	ldr	r1, [pc, #204]	@ (8000bbc <PrintCANLog+0x10c>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fa27 	bl	8003f44 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffbe 	bl	8000a7c <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 8000b00:	482f      	ldr	r0, [pc, #188]	@ (8000bc0 <PrintCANLog+0x110>)
 8000b02:	f7ff ffbb 	bl	8000a7c <USART3_SendString>

	sprintf(bufID,"%X",CANID);
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	492d      	ldr	r1, [pc, #180]	@ (8000bc4 <PrintCANLog+0x114>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fa18 	bl	8003f44 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	83fb      	strh	r3, [r7, #30]
 8000b18:	e00a      	b.n	8000b30 <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 8000b1a:	8bfa      	ldrh	r2, [r7, #30]
 8000b1c:	8bfb      	ldrh	r3, [r7, #30]
 8000b1e:	3220      	adds	r2, #32
 8000b20:	443a      	add	r2, r7
 8000b22:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000b26:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b28:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	83fb      	strh	r3, [r7, #30]
 8000b30:	8bfb      	ldrh	r3, [r7, #30]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d9f1      	bls.n	8000b1a <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b38:	223a      	movs	r2, #58	@ 0x3a
 8000b3a:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b3e:	2220      	movs	r2, #32
 8000b40:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000b42:	2300      	movs	r3, #0
 8000b44:	83fb      	strh	r3, [r7, #30]
 8000b46:	e025      	b.n	8000b94 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000b48:	8bfb      	ldrh	r3, [r7, #30]
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	491d      	ldr	r1, [pc, #116]	@ (8000bcc <PrintCANLog+0x11c>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 f9f3 	bl	8003f44 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8000b5e:	8bfa      	ldrh	r2, [r7, #30]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	3305      	adds	r3, #5
 8000b68:	7d39      	ldrb	r1, [r7, #20]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b6c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8000b6e:	8bfa      	ldrh	r2, [r7, #30]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	3306      	adds	r3, #6
 8000b78:	7d79      	ldrb	r1, [r7, #21]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b7c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8000b7e:	8bfa      	ldrh	r2, [r7, #30]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	3307      	adds	r3, #7
 8000b88:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000b8e:	8bfb      	ldrh	r3, [r7, #30]
 8000b90:	3301      	adds	r3, #1
 8000b92:	83fb      	strh	r3, [r7, #30]
 8000b94:	8bfb      	ldrh	r3, [r7, #30]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d9d6      	bls.n	8000b48 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <PrintCANLog+0x118>)
 8000ba2:	f7ff ff6b 	bl	8000a7c <USART3_SendString>
}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	080048b8 	.word	0x080048b8
 8000bb4:	080048bc 	.word	0x080048bc
 8000bb8:	2000120c 	.word	0x2000120c
 8000bbc:	080048a4 	.word	0x080048a4
 8000bc0:	080048a8 	.word	0x080048a8
 8000bc4:	080048ac 	.word	0x080048ac
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	080048b0 	.word	0x080048b0

08000bd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_UART_RxCpltCallback+0x34>)
 8000be0:	7819      	ldrb	r1, [r3, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_UART_RxCpltCallback+0x38>)
 8000be4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200001ec 	.word	0x200001ec
 8000c04:	200011f0 	.word	0x200011f0
 8000c08:	200001f0 	.word	0x200001f0

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a4a      	ldr	r2, [pc, #296]	@ (8000db0 <HAL_CAN_MspInit+0x148>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d13e      	bne.n	8000d08 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000c92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c94:	4b47      	ldr	r3, [pc, #284]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10d      	bne.n	8000cb8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	4b45      	ldr	r3, [pc, #276]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a44      	ldr	r2, [pc, #272]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000ca6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b42      	ldr	r3, [pc, #264]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cd4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ce6:	2309      	movs	r3, #9
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <HAL_CAN_MspInit+0x154>)
 8000cf2:	f001 fa45 	bl	8002180 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	2014      	movs	r0, #20
 8000cfc:	f001 f977 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d00:	2014      	movs	r0, #20
 8000d02:	f001 f990 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d06:	e04f      	b.n	8000da8 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc0 <HAL_CAN_MspInit+0x158>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d14a      	bne.n	8000da8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a27      	ldr	r2, [pc, #156]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000d36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_CAN_MspInit+0x14c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10d      	bne.n	8000d5c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_CAN_MspInit+0x150>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d78:	2360      	movs	r3, #96	@ 0x60
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <HAL_CAN_MspInit+0x15c>)
 8000d94:	f001 f9f4 	bl	8002180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	2040      	movs	r0, #64	@ 0x40
 8000d9e:	f001 f926 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000da2:	2040      	movs	r0, #64	@ 0x40
 8000da4:	f001 f93f 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	@ 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40006400 	.word	0x40006400
 8000db4:	20001210 	.word	0x20001210
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40006800 	.word	0x40006800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e5c <HAL_UART_MspInit+0x94>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d134      	bne.n	8000e54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_UART_MspInit+0x98>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e34:	2307      	movs	r3, #7
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <HAL_UART_MspInit+0x9c>)
 8000e40:	f001 f99e 	bl	8002180 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	2027      	movs	r0, #39	@ 0x27
 8000e4a:	f001 f8d0 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e4e:	2027      	movs	r0, #39	@ 0x27
 8000e50:	f001 f8e9 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004800 	.word	0x40004800
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020800 	.word	0x40020800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f90e 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <SysTick_Handler+0x18>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a02      	ldr	r2, [pc, #8]	@ (8000ed4 <SysTick_Handler+0x18>)
 8000ecc:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000120c 	.word	0x2000120c

08000ed8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f001 fb1f 	bl	8002520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <CAN1_RX0_IRQHandler+0x1c>)
 8000eee:	f000 fd73 	bl	80019d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <CAN1_RX0_IRQHandler+0x20>)
 8000ef4:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <CAN1_RX0_IRQHandler+0x24>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <CAN1_RX0_IRQHandler+0x1c>)
 8000efa:	f000 fc25 	bl	8001748 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000098 	.word	0x20000098
 8000f08:	200011fc 	.word	0x200011fc
 8000f0c:	20000148 	.word	0x20000148

08000f10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <USART3_IRQHandler+0x18>)
 8000f16:	f002 f8bf 	bl	8003098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4903      	ldr	r1, [pc, #12]	@ (8000f2c <USART3_IRQHandler+0x1c>)
 8000f1e:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USART3_IRQHandler+0x18>)
 8000f20:	f002 f895 	bl	800304e <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000e8 	.word	0x200000e8
 8000f2c:	200011f0 	.word	0x200011f0

08000f30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <CAN2_RX0_IRQHandler+0x1c>)
 8000f36:	f000 fd4f 	bl	80019d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <CAN2_RX0_IRQHandler+0x20>)
 8000f3c:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <CAN2_RX0_IRQHandler+0x24>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <CAN2_RX0_IRQHandler+0x1c>)
 8000f42:	f000 fc01 	bl	8001748 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000c0 	.word	0x200000c0
 8000f50:	20001204 	.word	0x20001204
 8000f54:	200001a4 	.word	0x200001a4

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f003 f804 	bl	8003f94 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20001214 	.word	0x20001214
 8000fc0:	20001368 	.word	0x20001368

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	@ (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	@ (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f002 ffc3 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff faa1 	bl	8000560 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800102c:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8001030:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001034:	20001364 	.word	0x20001364

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 ffb7 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fdd2 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 ffcf 	bl	8002042 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 ff97 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000020 	.word	0x20000020
 80010d8:	20000028 	.word	0x20000028
 80010dc:	20000024 	.word	0x20000024

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000028 	.word	0x20000028
 8001104:	20001218 	.word	0x20001218

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20001218 	.word	0x20001218

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000028 	.word	0x20000028

08001168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0ed      	b.n	8001356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd6e 	bl	8000c68 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff ffb4 	bl	8001108 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a4:	f7ff ffb0 	bl	8001108 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90b      	bls.n	80011ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0c5      	b.n	8001356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e5      	beq.n	80011a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0202 	bic.w	r2, r2, #2
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff ff8e 	bl	8001108 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ee:	e012      	b.n	8001216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f0:	f7ff ff8a 	bl	8001108 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d90b      	bls.n	8001216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e09f      	b.n	8001356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e5      	bne.n	80011f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e007      	b.n	800124e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e5b      	ldrb	r3, [r3, #25]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e007      	b.n	8001278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0220 	bic.w	r2, r2, #32
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7edb      	ldrb	r3, [r3, #27]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0210 	bic.w	r2, r2, #16
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0210 	orr.w	r2, r2, #16
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7f1b      	ldrb	r3, [r3, #28]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7f5b      	ldrb	r3, [r3, #29]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	ea42 0103 	orr.w	r1, r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001376:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d003      	beq.n	8001386 <HAL_CAN_ConfigFilter+0x26>
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	2b02      	cmp	r3, #2
 8001382:	f040 80be 	bne.w	8001502 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001386:	4b65      	ldr	r3, [pc, #404]	@ (800151c <HAL_CAN_ConfigFilter+0x1bc>)
 8001388:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013a0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2201      	movs	r2, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d123      	bne.n	8001430 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3248      	adds	r2, #72	@ 0x48
 8001410:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001424:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001426:	6979      	ldr	r1, [r7, #20]
 8001428:	3348      	adds	r3, #72	@ 0x48
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d122      	bne.n	800147e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001458:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3248      	adds	r2, #72	@ 0x48
 800145e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001472:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001474:	6979      	ldr	r1, [r7, #20]
 8001476:	3348      	adds	r3, #72	@ 0x48
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001498:	e007      	b.n	80014aa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014c4:	e007      	b.n	80014d6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014f4:	f023 0201 	bic.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e006      	b.n	8001510 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40006400 	.word	0x40006400

08001520 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d12e      	bne.n	8001592 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fddc 	bl	8001108 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001552:	e012      	b.n	800157a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001554:	f7ff fdd8 	bl	8001108 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001566:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e012      	b.n	80015a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e006      	b.n	80015a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d003      	beq.n	80015d4 <HAL_CAN_AddTxMessage+0x2c>
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	f040 80ad 	bne.w	800172e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10a      	bne.n	80015f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8095 	beq.w	800171e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	0e1b      	lsrs	r3, r3, #24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015fe:	2201      	movs	r2, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10d      	bne.n	800162c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	6809      	ldr	r1, [r1, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3318      	adds	r3, #24
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e00f      	b.n	800164c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001636:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001640:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3318      	adds	r3, #24
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	440b      	add	r3, r1
 800164a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3318      	adds	r3, #24
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	3304      	adds	r3, #4
 800165e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	7d1b      	ldrb	r3, [r3, #20]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d111      	bne.n	800168c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3318      	adds	r3, #24
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6811      	ldr	r1, [r2, #0]
 800167c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3318      	adds	r3, #24
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	440b      	add	r3, r1
 8001688:	3304      	adds	r3, #4
 800168a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3307      	adds	r3, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061a      	lsls	r2, r3, #24
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3306      	adds	r3, #6
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3305      	adds	r3, #5
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	3204      	adds	r2, #4
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4610      	mov	r0, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	6811      	ldr	r1, [r2, #0]
 80016b4:	ea43 0200 	orr.w	r2, r3, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	440b      	add	r3, r1
 80016be:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3303      	adds	r3, #3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	061a      	lsls	r2, r3, #24
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	4313      	orrs	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	4610      	mov	r0, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	ea43 0200 	orr.w	r2, r3, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3318      	adds	r3, #24
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	6811      	ldr	r1, [r2, #0]
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3318      	adds	r3, #24
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	440b      	add	r3, r1
 8001718:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e00e      	b.n	800173c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e006      	b.n	800173c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3724      	adds	r7, #36	@ 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d003      	beq.n	800176c <HAL_CAN_GetRxMessage+0x24>
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b02      	cmp	r3, #2
 8001768:	f040 8103 	bne.w	8001972 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d116      	bne.n	80017ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0f7      	b.n	8001980 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0e8      	b.n	8001980 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	331b      	adds	r3, #27
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0204 	and.w	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10c      	bne.n	80017e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	331b      	adds	r3, #27
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0d5b      	lsrs	r3, r3, #21
 80017dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e00b      	b.n	80017fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	331b      	adds	r3, #27
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	331b      	adds	r3, #27
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0202 	and.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	331b      	adds	r3, #27
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2208      	movs	r2, #8
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	e00b      	b.n	800184c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 020f 	and.w	r2, r3, #15
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	331b      	adds	r3, #27
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	3304      	adds	r3, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	331b      	adds	r3, #27
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	3304      	adds	r3, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0a1a      	lsrs	r2, r3, #8
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0c1a      	lsrs	r2, r3, #16
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3302      	adds	r3, #2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0e1a      	lsrs	r2, r3, #24
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3303      	adds	r3, #3
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	3304      	adds	r3, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0a1a      	lsrs	r2, r3, #8
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3305      	adds	r3, #5
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0c1a      	lsrs	r2, r3, #16
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3306      	adds	r3, #6
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0e1a      	lsrs	r2, r3, #24
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3307      	adds	r3, #7
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d108      	bne.n	800195e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	e007      	b.n	800196e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0220 	orr.w	r2, r2, #32
 800196c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e006      	b.n	8001980 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d002      	beq.n	80019aa <HAL_CAN_ActivateNotification+0x1e>
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d109      	bne.n	80019be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6959      	ldr	r1, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e006      	b.n	80019cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d07c      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f983 	bl	8001d46 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a40:	e016      	b.n	8001a70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a54:	e00c      	b.n	8001a70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	e002      	b.n	8001a70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f989 	bl	8001d82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d024      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f963 	bl	8001d5a <HAL_CAN_TxMailbox1CompleteCallback>
 8001a94:	e016      	b.n	8001ac4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e00c      	b.n	8001ac4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	e002      	b.n	8001ac4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f969 	bl	8001d96 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f943 	bl	8001d6e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ae8:	e016      	b.n	8001b18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afc:	e00c      	b.n	8001b18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b10:	e002      	b.n	8001b18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f949 	bl	8001daa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f930 	bl	8001dbe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe ff40 	bl	80009fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f912 	bl	8001de6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8f9 	bl	8001dd2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8fc 	bl	8001dfa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8f5 	bl	8001e0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d07b      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d072      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d043      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03e      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca6:	2b60      	cmp	r3, #96	@ 0x60
 8001ca8:	d02b      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x32a>
 8001caa:	2b60      	cmp	r3, #96	@ 0x60
 8001cac:	d82e      	bhi.n	8001d0c <HAL_CAN_IRQHandler+0x334>
 8001cae:	2b50      	cmp	r3, #80	@ 0x50
 8001cb0:	d022      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x320>
 8001cb2:	2b50      	cmp	r3, #80	@ 0x50
 8001cb4:	d82a      	bhi.n	8001d0c <HAL_CAN_IRQHandler+0x334>
 8001cb6:	2b40      	cmp	r3, #64	@ 0x40
 8001cb8:	d019      	beq.n	8001cee <HAL_CAN_IRQHandler+0x316>
 8001cba:	2b40      	cmp	r3, #64	@ 0x40
 8001cbc:	d826      	bhi.n	8001d0c <HAL_CAN_IRQHandler+0x334>
 8001cbe:	2b30      	cmp	r3, #48	@ 0x30
 8001cc0:	d010      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x30c>
 8001cc2:	2b30      	cmp	r3, #48	@ 0x30
 8001cc4:	d822      	bhi.n	8001d0c <HAL_CAN_IRQHandler+0x334>
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d002      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x2f8>
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d005      	beq.n	8001cda <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cce:	e01d      	b.n	8001d0c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	f043 0308 	orr.w	r3, r3, #8
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd8:	e019      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ce2:	e014      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	f043 0320 	orr.w	r3, r3, #32
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cec:	e00f      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf6:	e00a      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d00:	e005      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d0a:	e000      	b.n	8001d0e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d0c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d1c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2204      	movs	r2, #4
 8001d24:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f872 	bl	8001e22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	@ (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff f84e 	bl	8001108 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d008      	beq.n	800208c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2280      	movs	r2, #128	@ 0x80
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e052      	b.n	8002132 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0216 	bic.w	r2, r2, #22
 800209a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <HAL_DMA_Abort+0x62>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0208 	bic.w	r2, r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020dc:	e013      	b.n	8002106 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020de:	f7ff f813 	bl	8001108 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d90c      	bls.n	8002106 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e015      	b.n	8002132 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e4      	bne.n	80020de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	223f      	movs	r2, #63	@ 0x3f
 800211a:	409a      	lsls	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e00c      	b.n	8002172 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2205      	movs	r2, #5
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e16b      	b.n	8002474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 815a 	bne.w	800246e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d017      	beq.n	8002270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80b4 	beq.w	800246e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b60      	ldr	r3, [pc, #384]	@ (800248c <HAL_GPIO_Init+0x30c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a5f      	ldr	r2, [pc, #380]	@ (800248c <HAL_GPIO_Init+0x30c>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_GPIO_Init+0x30c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002322:	4a5b      	ldr	r2, [pc, #364]	@ (8002490 <HAL_GPIO_Init+0x310>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_GPIO_Init+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	@ (8002498 <HAL_GPIO_Init+0x318>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	@ (800249c <HAL_GPIO_Init+0x31c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	@ (80024a0 <HAL_GPIO_Init+0x320>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x21a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4e      	ldr	r2, [pc, #312]	@ (80024a4 <HAL_GPIO_Init+0x324>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x216>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_GPIO_Init+0x328>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x212>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4c      	ldr	r2, [pc, #304]	@ (80024ac <HAL_GPIO_Init+0x32c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4b      	ldr	r2, [pc, #300]	@ (80024b0 <HAL_GPIO_Init+0x330>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x20a>
 8002386:	2307      	movs	r3, #7
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238a:	2308      	movs	r3, #8
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	@ (8002490 <HAL_GPIO_Init+0x310>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae90 	bls.w	800219c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40021c00 	.word	0x40021c00
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43d9      	mvns	r1, r3
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f806 	bl	8002550 <HAL_GPIO_EXTI_Callback>
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e267      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	4b88      	ldr	r3, [pc, #544]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b85      	ldr	r3, [pc, #532]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b82      	ldr	r3, [pc, #520]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b7e      	ldr	r3, [pc, #504]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e242      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b76      	ldr	r3, [pc, #472]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b70      	ldr	r3, [pc, #448]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6f      	ldr	r2, [pc, #444]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6d      	ldr	r3, [pc, #436]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6c      	ldr	r2, [pc, #432]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b66      	ldr	r3, [pc, #408]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a65      	ldr	r2, [pc, #404]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fd72 	bl	8001108 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fd6e 	bl	8001108 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e207      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5b      	ldr	r3, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fd5e 	bl	8001108 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fd5a 	bl	8001108 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1f3      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b51      	ldr	r3, [pc, #324]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	4b4a      	ldr	r3, [pc, #296]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b44      	ldr	r3, [pc, #272]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c7      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4937      	ldr	r1, [pc, #220]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fd13 	bl	8001108 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fd0f 	bl	8001108 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a8      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4925      	ldr	r1, [pc, #148]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fcf2 	bl	8001108 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fcee 	bl	8001108 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e187      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_RCC_OscConfig+0x248>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fcd2 	bl	8001108 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fcce 	bl	8001108 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e167      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e01b      	b.n	80027c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_OscConfig+0x248>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fe fcbb 	bl	8001108 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e00e      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fcb7 	bl	8001108 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d907      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e150      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470000 	.word	0x42470000
 80027b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ea      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8097 	beq.w	80028fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a7c      	ldr	r2, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b77      	ldr	r3, [pc, #476]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b74      	ldr	r3, [pc, #464]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a73      	ldr	r2, [pc, #460]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fc77 	bl	8001108 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fc73 	bl	8001108 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e10c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b6a      	ldr	r3, [pc, #424]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ea>
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a63      	ldr	r2, [pc, #396]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5e      	ldr	r2, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a5b      	ldr	r2, [pc, #364]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002874:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a57      	ldr	r2, [pc, #348]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a54      	ldr	r2, [pc, #336]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fc38 	bl	8001108 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fc34 	bl	8001108 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0cb      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x334>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fc22 	bl	8001108 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fc1e 	bl	8001108 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b5      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	4a38      	ldr	r2, [pc, #224]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a1 	beq.w	8002a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002906:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d05c      	beq.n	80029cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d141      	bne.n	800299e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fbf2 	bl	8001108 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fbee 	bl	8001108 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e087      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	491b      	ldr	r1, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fbc7 	bl	8001108 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe fbc3 	bl	8001108 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e05c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x416>
 800299c:	e054      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fbb0 	bl	8001108 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe fbac 	bl	8001108 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e045      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x444>
 80029ca:	e03d      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e038      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x4ec>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11a      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fade 	bl	8001108 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe fada 	bl	8001108 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fa3e 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	080048c4 	.word	0x080048c4
 8002c1c:	20000020 	.word	0x20000020
 8002c20:	20000024 	.word	0x20000024

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b094      	sub	sp, #80	@ 0x50
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c30:	2300      	movs	r3, #0
 8002c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c34:	2300      	movs	r3, #0
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80e1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e0db      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b73      	ldr	r3, [pc, #460]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c5c:	e0db      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c62:	e0d8      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b6f      	ldr	r3, [pc, #444]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4621      	mov	r1, r4
 8002cb0:	1a51      	subs	r1, r2, r1
 8002cb2:	6139      	str	r1, [r7, #16]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	018b      	lsls	r3, r1, #6
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	018a      	lsls	r2, r1, #6
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cdc:	4659      	mov	r1, fp
 8002cde:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	4699      	mov	r9, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	eb18 0303 	adds.w	r3, r8, r3
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	462b      	mov	r3, r5
 8002d04:	eb49 0303 	adc.w	r3, r9, r3
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d16:	4629      	mov	r1, r5
 8002d18:	024b      	lsls	r3, r1, #9
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d20:	4621      	mov	r1, r4
 8002d22:	024a      	lsls	r2, r1, #9
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d34:	f7fd fa9c 	bl	8000270 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d40:	e058      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0159      	lsls	r1, r3, #5
 8002d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6e:	0150      	lsls	r0, r2, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4641      	mov	r1, r8
 8002d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d94:	ebb2 040a 	subs.w	r4, r2, sl
 8002d98:	eb63 050b 	sbc.w	r5, r3, fp
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	00eb      	lsls	r3, r5, #3
 8002da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	18e3      	adds	r3, r4, r3
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	464b      	mov	r3, r9
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	61fa      	str	r2, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	f7fd fa42 	bl	8000270 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3750      	adds	r7, #80	@ 0x50
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000020 	.word	0x20000020

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	080048d4 	.word	0x080048d4

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffdc 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	080048d4 	.word	0x080048d4

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd ff82 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fdbd 	bl	8003a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d175      	bne.n	8003044 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Transmit+0x2c>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e06e      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	@ 0x21
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f76:	f7fe f8c7 	bl	8001108 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f90:	d108      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e003      	b.n	8002fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fac:	e02e      	b.n	800300c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	@ 0x80
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fb1f 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e03a      	b.n	8003046 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e007      	b.n	8002ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1cb      	bne.n	8002fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 faeb 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e006      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	4613      	mov	r3, r2
 800305a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	d112      	bne.n	800308e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Receive_IT+0x26>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00b      	b.n	8003090 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fb12 	bl	80036ae <UART_Start_Receive_IT>
 800308a:	4603      	mov	r3, r0
 800308c:	e000      	b.n	8003090 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0ba      	sub	sp, #232	@ 0xe8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_UART_IRQHandler+0x66>
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fbf2 	bl	80038e0 <UART_Receive_IT>
      return;
 80030fc:	e25b      	b.n	80035b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80de 	beq.w	80032c4 <HAL_UART_IRQHandler+0x22c>
 8003108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003118:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80d1 	beq.w	80032c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xae>
 800312e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xd2>
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_UART_IRQHandler+0xf6>
 8003176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d011      	beq.n	80031be <HAL_UART_IRQHandler+0x126>
 800319a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f043 0208 	orr.w	r2, r3, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 81f2 	beq.w	80035ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_UART_IRQHandler+0x14e>
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fb7d 	bl	80038e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_UART_IRQHandler+0x17a>
 800320a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d04f      	beq.n	80032b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa85 	bl	8003722 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b40      	cmp	r3, #64	@ 0x40
 8003224:	d141      	bne.n	80032aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800323c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003252:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800325e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800326a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1d9      	bne.n	8003226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d013      	beq.n	80032a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	4a7e      	ldr	r2, [pc, #504]	@ (8003478 <HAL_UART_IRQHandler+0x3e0>)
 8003280:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe ff57 	bl	800213a <HAL_DMA_Abort_IT>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800329c:	4610      	mov	r0, r2
 800329e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	e00e      	b.n	80032c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f994 	bl	80035d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e00a      	b.n	80032c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f990 	bl	80035d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e006      	b.n	80032c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f98c 	bl	80035d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032be:	e175      	b.n	80035ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	bf00      	nop
    return;
 80032c2:	e173      	b.n	80035ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 814f 	bne.w	800356c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8148 	beq.w	800356c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8141 	beq.w	800356c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	f040 80b6 	bne.w	800347c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800331c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8145 	beq.w	80035b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800332a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800332e:	429a      	cmp	r2, r3
 8003330:	f080 813e 	bcs.w	80035b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800333a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003346:	f000 8088 	beq.w	800345a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800337a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003382:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d9      	bne.n	800334a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e1      	bne.n	8003396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800343c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800343e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800344a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fe00 	bl	800205a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8b7 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003476:	e09b      	b.n	80035b0 <HAL_UART_IRQHandler+0x518>
 8003478:	080037e9 	.word	0x080037e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003484:	b29b      	uxth	r3, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 808e 	beq.w	80035b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8089 	beq.w	80035b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80034c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e3      	bne.n	80034a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0310 	bic.w	r3, r3, #16
 8003536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003544:	61fa      	str	r2, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	69b9      	ldr	r1, [r7, #24]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	617b      	str	r3, [r7, #20]
   return(result);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e3      	bne.n	8003520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800355e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f83d 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800356a:	e023      	b.n	80035b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_UART_IRQHandler+0x4f4>
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f943 	bl	8003810 <UART_Transmit_IT>
    return;
 800358a:	e014      	b.n	80035b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_UART_IRQHandler+0x51e>
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f983 	bl	80038b0 <UART_EndTransmit_IT>
    return;
 80035aa:	e004      	b.n	80035b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035b4:	bf00      	nop
  }
}
 80035b6:	37e8      	adds	r7, #232	@ 0xe8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360c:	e03b      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d037      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fd fd77 	bl	8001108 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <UART_WaitOnFlagUntilTimeout+0x30>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e03a      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d023      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b80      	cmp	r3, #128	@ 0x80
 8003642:	d020      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b40      	cmp	r3, #64	@ 0x40
 8003648:	d01d      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d116      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f857 	bl	8003722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2208      	movs	r2, #8
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d0b4      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2222      	movs	r2, #34	@ 0x22
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0220 	orr.w	r2, r2, #32
 8003712:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b095      	sub	sp, #84	@ 0x54
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800374a:	643a      	str	r2, [r7, #64]	@ 0x40
 800374c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	61fb      	str	r3, [r7, #28]
   return(result);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	2b01      	cmp	r3, #1
 8003798:	d119      	bne.n	80037ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0310 	bic.w	r3, r3, #16
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330c      	adds	r3, #12
 80037b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ba:	61ba      	str	r2, [r7, #24]
 80037bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	613b      	str	r3, [r7, #16]
   return(result);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e5      	bne.n	800379a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037dc:	bf00      	nop
 80037de:	3754      	adds	r7, #84	@ 0x54
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7ff fee4 	bl	80035d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b21      	cmp	r3, #33	@ 0x21
 8003822:	d13e      	bne.n	80038a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382c:	d114      	bne.n	8003858 <UART_Transmit_IT+0x48>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d110      	bne.n	8003858 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]
 8003856:	e008      	b.n	800386a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	1c59      	adds	r1, r3, #1
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6211      	str	r1, [r2, #32]
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4619      	mov	r1, r3
 8003878:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800388c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800389c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe73 	bl	80035bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	@ 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b22      	cmp	r3, #34	@ 0x22
 80038f2:	f040 80ae 	bne.w	8003a52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fe:	d117      	bne.n	8003930 <UART_Receive_IT+0x50>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d113      	bne.n	8003930 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	b29a      	uxth	r2, r3
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
 800392e:	e026      	b.n	800397e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003942:	d007      	beq.n	8003954 <UART_Receive_IT+0x74>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <UART_Receive_IT+0x82>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e008      	b.n	8003974 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800396e:	b2da      	uxtb	r2, r3
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4619      	mov	r1, r3
 800398c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800398e:	2b00      	cmp	r3, #0
 8003990:	d15d      	bne.n	8003a4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0220 	bic.w	r2, r2, #32
 80039a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d135      	bne.n	8003a44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	623a      	str	r2, [r7, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69f9      	ldr	r1, [r7, #28]
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d10a      	bne.n	8003a36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fdd1 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
 8003a42:	e002      	b.n	8003a4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd f8c3 	bl	8000bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e002      	b.n	8003a54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3730      	adds	r7, #48	@ 0x30
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a60:	b0c0      	sub	sp, #256	@ 0x100
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	ea40 0301 	orr.w	r3, r0, r1
 8003a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ab4:	f021 010c 	bic.w	r1, r1, #12
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	6999      	ldr	r1, [r3, #24]
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	ea40 0301 	orr.w	r3, r0, r1
 8003ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b8f      	ldr	r3, [pc, #572]	@ (8003d28 <UART_SetConfig+0x2cc>)
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d005      	beq.n	8003afc <UART_SetConfig+0xa0>
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d2c <UART_SetConfig+0x2d0>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d104      	bne.n	8003b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7ff f9b8 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003b00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b04:	e003      	b.n	8003b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b06:	f7ff f99f 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8003b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b18:	f040 810c 	bne.w	8003d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b36:	415b      	adcs	r3, r3
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b3e:	4621      	mov	r1, r4
 8003b40:	eb12 0801 	adds.w	r8, r2, r1
 8003b44:	4629      	mov	r1, r5
 8003b46:	eb43 0901 	adc.w	r9, r3, r1
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5e:	4690      	mov	r8, r2
 8003b60:	4699      	mov	r9, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	eb18 0303 	adds.w	r3, r8, r3
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	eb49 0303 	adc.w	r3, r9, r3
 8003b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	18db      	adds	r3, r3, r3
 8003b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b90:	4613      	mov	r3, r2
 8003b92:	eb42 0303 	adc.w	r3, r2, r3
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ba0:	f7fc fb66 	bl	8000270 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b61      	ldr	r3, [pc, #388]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003baa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	011c      	lsls	r4, r3, #4
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003bda:	4649      	mov	r1, r9
 8003bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf4:	4692      	mov	sl, r2
 8003bf6:	469b      	mov	fp, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8003bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c02:	464b      	mov	r3, r9
 8003c04:	eb4b 0303 	adc.w	r3, fp, r3
 8003c08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c20:	460b      	mov	r3, r1
 8003c22:	18db      	adds	r3, r3, r3
 8003c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c26:	4613      	mov	r3, r2
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c36:	f7fc fb1b 	bl	8000270 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	@ 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003c58:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c64:	441c      	add	r4, r3
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c80:	415b      	adcs	r3, r3
 8003c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cf2:	f7fc fabd 	bl	8000270 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2164      	movs	r1, #100	@ 0x64
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	3332      	adds	r3, #50	@ 0x32
 8003d0e:	4a08      	ldr	r2, [pc, #32]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0207 	and.w	r2, r3, #7
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4422      	add	r2, r4
 8003d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d24:	e106      	b.n	8003f34 <UART_SetConfig+0x4d8>
 8003d26:	bf00      	nop
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d46:	4642      	mov	r2, r8
 8003d48:	464b      	mov	r3, r9
 8003d4a:	1891      	adds	r1, r2, r2
 8003d4c:	6239      	str	r1, [r7, #32]
 8003d4e:	415b      	adcs	r3, r3
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d56:	4641      	mov	r1, r8
 8003d58:	1854      	adds	r4, r2, r1
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	eb43 0501 	adc.w	r5, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003da2:	4629      	mov	r1, r5
 8003da4:	008b      	lsls	r3, r1, #2
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dac:	4621      	mov	r1, r4
 8003dae:	008a      	lsls	r2, r1, #2
 8003db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003db4:	f7fc fa5c 	bl	8000270 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4b60      	ldr	r3, [pc, #384]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	011c      	lsls	r4, r3, #4
 8003dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dd8:	4642      	mov	r2, r8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	61b9      	str	r1, [r7, #24]
 8003de0:	415b      	adcs	r3, r3
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de8:	4641      	mov	r1, r8
 8003dea:	1851      	adds	r1, r2, r1
 8003dec:	6139      	str	r1, [r7, #16]
 8003dee:	4649      	mov	r1, r9
 8003df0:	414b      	adcs	r3, r1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e00:	4659      	mov	r1, fp
 8003e02:	00cb      	lsls	r3, r1, #3
 8003e04:	4651      	mov	r1, sl
 8003e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	00ca      	lsls	r2, r1, #3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	4642      	mov	r2, r8
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	460a      	mov	r2, r1
 8003e20:	eb42 0303 	adc.w	r3, r2, r3
 8003e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e40:	4649      	mov	r1, r9
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	008a      	lsls	r2, r1, #2
 8003e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e52:	f7fc fa0d 	bl	8000270 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2264      	movs	r2, #100	@ 0x64
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	1acb      	subs	r3, r1, r3
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	3332      	adds	r3, #50	@ 0x32
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e7c:	441c      	add	r4, r3
 8003e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e82:	2200      	movs	r2, #0
 8003e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	415b      	adcs	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	1851      	adds	r1, r2, r1
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	414b      	adcs	r3, r1
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	00cb      	lsls	r3, r1, #3
 8003eb8:	4651      	mov	r1, sl
 8003eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	00ca      	lsls	r2, r1, #3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ece:	464b      	mov	r3, r9
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	eb42 0303 	adc.w	r3, r2, r3
 8003ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ee2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efa:	4641      	mov	r1, r8
 8003efc:	008a      	lsls	r2, r1, #2
 8003efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f02:	f7fc f9b5 	bl	8000270 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	@ 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	3332      	adds	r3, #50	@ 0x32
 8003f1e:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4422      	add	r2, r4
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f40:	51eb851f 	.word	0x51eb851f

08003f44 <siprintf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b500      	push	{lr}
 8003f48:	b09c      	sub	sp, #112	@ 0x70
 8003f4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f4c:	9002      	str	r0, [sp, #8]
 8003f4e:	9006      	str	r0, [sp, #24]
 8003f50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f54:	4809      	ldr	r0, [pc, #36]	@ (8003f7c <siprintf+0x38>)
 8003f56:	9107      	str	r1, [sp, #28]
 8003f58:	9104      	str	r1, [sp, #16]
 8003f5a:	4909      	ldr	r1, [pc, #36]	@ (8003f80 <siprintf+0x3c>)
 8003f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f60:	9105      	str	r1, [sp, #20]
 8003f62:	6800      	ldr	r0, [r0, #0]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	a902      	add	r1, sp, #8
 8003f68:	f000 f994 	bl	8004294 <_svfiprintf_r>
 8003f6c:	9b02      	ldr	r3, [sp, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	b01c      	add	sp, #112	@ 0x70
 8003f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f78:	b003      	add	sp, #12
 8003f7a:	4770      	bx	lr
 8003f7c:	2000002c 	.word	0x2000002c
 8003f80:	ffff0208 	.word	0xffff0208

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <__errno>:
 8003f94:	4b01      	ldr	r3, [pc, #4]	@ (8003f9c <__errno+0x8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	2000002c 	.word	0x2000002c

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f000 fc66 	bl	8004884 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	08004918 	.word	0x08004918
 8003fdc:	08004918 	.word	0x08004918
 8003fe0:	08004918 	.word	0x08004918
 8003fe4:	0800491c 	.word	0x0800491c

08003fe8 <__retarget_lock_acquire_recursive>:
 8003fe8:	4770      	bx	lr

08003fea <__retarget_lock_release_recursive>:
 8003fea:	4770      	bx	lr

08003fec <_free_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4605      	mov	r5, r0
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d041      	beq.n	8004078 <_free_r+0x8c>
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f0c      	subs	r4, r1, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfb8      	it	lt
 8003ffe:	18e4      	addlt	r4, r4, r3
 8004000:	f000 f8e0 	bl	80041c4 <__malloc_lock>
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <_free_r+0x90>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	b933      	cbnz	r3, 8004018 <_free_r+0x2c>
 800400a:	6063      	str	r3, [r4, #4]
 800400c:	6014      	str	r4, [r2, #0]
 800400e:	4628      	mov	r0, r5
 8004010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004014:	f000 b8dc 	b.w	80041d0 <__malloc_unlock>
 8004018:	42a3      	cmp	r3, r4
 800401a:	d908      	bls.n	800402e <_free_r+0x42>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428b      	cmp	r3, r1
 8004022:	bf01      	itttt	eq
 8004024:	6819      	ldreq	r1, [r3, #0]
 8004026:	685b      	ldreq	r3, [r3, #4]
 8004028:	1809      	addeq	r1, r1, r0
 800402a:	6021      	streq	r1, [r4, #0]
 800402c:	e7ed      	b.n	800400a <_free_r+0x1e>
 800402e:	461a      	mov	r2, r3
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b10b      	cbz	r3, 8004038 <_free_r+0x4c>
 8004034:	42a3      	cmp	r3, r4
 8004036:	d9fa      	bls.n	800402e <_free_r+0x42>
 8004038:	6811      	ldr	r1, [r2, #0]
 800403a:	1850      	adds	r0, r2, r1
 800403c:	42a0      	cmp	r0, r4
 800403e:	d10b      	bne.n	8004058 <_free_r+0x6c>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	4401      	add	r1, r0
 8004044:	1850      	adds	r0, r2, r1
 8004046:	4283      	cmp	r3, r0
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	d1e0      	bne.n	800400e <_free_r+0x22>
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	6053      	str	r3, [r2, #4]
 8004052:	4408      	add	r0, r1
 8004054:	6010      	str	r0, [r2, #0]
 8004056:	e7da      	b.n	800400e <_free_r+0x22>
 8004058:	d902      	bls.n	8004060 <_free_r+0x74>
 800405a:	230c      	movs	r3, #12
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	e7d6      	b.n	800400e <_free_r+0x22>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	1821      	adds	r1, r4, r0
 8004064:	428b      	cmp	r3, r1
 8004066:	bf04      	itt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	bf04      	itt	eq
 8004070:	1809      	addeq	r1, r1, r0
 8004072:	6021      	streq	r1, [r4, #0]
 8004074:	6054      	str	r4, [r2, #4]
 8004076:	e7ca      	b.n	800400e <_free_r+0x22>
 8004078:	bd38      	pop	{r3, r4, r5, pc}
 800407a:	bf00      	nop
 800407c:	20001360 	.word	0x20001360

08004080 <sbrk_aligned>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4e0f      	ldr	r6, [pc, #60]	@ (80040c0 <sbrk_aligned+0x40>)
 8004084:	460c      	mov	r4, r1
 8004086:	6831      	ldr	r1, [r6, #0]
 8004088:	4605      	mov	r5, r0
 800408a:	b911      	cbnz	r1, 8004092 <sbrk_aligned+0x12>
 800408c:	f000 fba6 	bl	80047dc <_sbrk_r>
 8004090:	6030      	str	r0, [r6, #0]
 8004092:	4621      	mov	r1, r4
 8004094:	4628      	mov	r0, r5
 8004096:	f000 fba1 	bl	80047dc <_sbrk_r>
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	d103      	bne.n	80040a6 <sbrk_aligned+0x26>
 800409e:	f04f 34ff 	mov.w	r4, #4294967295
 80040a2:	4620      	mov	r0, r4
 80040a4:	bd70      	pop	{r4, r5, r6, pc}
 80040a6:	1cc4      	adds	r4, r0, #3
 80040a8:	f024 0403 	bic.w	r4, r4, #3
 80040ac:	42a0      	cmp	r0, r4
 80040ae:	d0f8      	beq.n	80040a2 <sbrk_aligned+0x22>
 80040b0:	1a21      	subs	r1, r4, r0
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 fb92 	bl	80047dc <_sbrk_r>
 80040b8:	3001      	adds	r0, #1
 80040ba:	d1f2      	bne.n	80040a2 <sbrk_aligned+0x22>
 80040bc:	e7ef      	b.n	800409e <sbrk_aligned+0x1e>
 80040be:	bf00      	nop
 80040c0:	2000135c 	.word	0x2000135c

080040c4 <_malloc_r>:
 80040c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040c8:	1ccd      	adds	r5, r1, #3
 80040ca:	f025 0503 	bic.w	r5, r5, #3
 80040ce:	3508      	adds	r5, #8
 80040d0:	2d0c      	cmp	r5, #12
 80040d2:	bf38      	it	cc
 80040d4:	250c      	movcc	r5, #12
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	4606      	mov	r6, r0
 80040da:	db01      	blt.n	80040e0 <_malloc_r+0x1c>
 80040dc:	42a9      	cmp	r1, r5
 80040de:	d904      	bls.n	80040ea <_malloc_r+0x26>
 80040e0:	230c      	movs	r3, #12
 80040e2:	6033      	str	r3, [r6, #0]
 80040e4:	2000      	movs	r0, #0
 80040e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041c0 <_malloc_r+0xfc>
 80040ee:	f000 f869 	bl	80041c4 <__malloc_lock>
 80040f2:	f8d8 3000 	ldr.w	r3, [r8]
 80040f6:	461c      	mov	r4, r3
 80040f8:	bb44      	cbnz	r4, 800414c <_malloc_r+0x88>
 80040fa:	4629      	mov	r1, r5
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7ff ffbf 	bl	8004080 <sbrk_aligned>
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	4604      	mov	r4, r0
 8004106:	d158      	bne.n	80041ba <_malloc_r+0xf6>
 8004108:	f8d8 4000 	ldr.w	r4, [r8]
 800410c:	4627      	mov	r7, r4
 800410e:	2f00      	cmp	r7, #0
 8004110:	d143      	bne.n	800419a <_malloc_r+0xd6>
 8004112:	2c00      	cmp	r4, #0
 8004114:	d04b      	beq.n	80041ae <_malloc_r+0xea>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	4639      	mov	r1, r7
 800411a:	4630      	mov	r0, r6
 800411c:	eb04 0903 	add.w	r9, r4, r3
 8004120:	f000 fb5c 	bl	80047dc <_sbrk_r>
 8004124:	4581      	cmp	r9, r0
 8004126:	d142      	bne.n	80041ae <_malloc_r+0xea>
 8004128:	6821      	ldr	r1, [r4, #0]
 800412a:	1a6d      	subs	r5, r5, r1
 800412c:	4629      	mov	r1, r5
 800412e:	4630      	mov	r0, r6
 8004130:	f7ff ffa6 	bl	8004080 <sbrk_aligned>
 8004134:	3001      	adds	r0, #1
 8004136:	d03a      	beq.n	80041ae <_malloc_r+0xea>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	442b      	add	r3, r5
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	f8d8 3000 	ldr.w	r3, [r8]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	bb62      	cbnz	r2, 80041a0 <_malloc_r+0xdc>
 8004146:	f8c8 7000 	str.w	r7, [r8]
 800414a:	e00f      	b.n	800416c <_malloc_r+0xa8>
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	1b52      	subs	r2, r2, r5
 8004150:	d420      	bmi.n	8004194 <_malloc_r+0xd0>
 8004152:	2a0b      	cmp	r2, #11
 8004154:	d917      	bls.n	8004186 <_malloc_r+0xc2>
 8004156:	1961      	adds	r1, r4, r5
 8004158:	42a3      	cmp	r3, r4
 800415a:	6025      	str	r5, [r4, #0]
 800415c:	bf18      	it	ne
 800415e:	6059      	strne	r1, [r3, #4]
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	bf08      	it	eq
 8004164:	f8c8 1000 	streq.w	r1, [r8]
 8004168:	5162      	str	r2, [r4, r5]
 800416a:	604b      	str	r3, [r1, #4]
 800416c:	4630      	mov	r0, r6
 800416e:	f000 f82f 	bl	80041d0 <__malloc_unlock>
 8004172:	f104 000b 	add.w	r0, r4, #11
 8004176:	1d23      	adds	r3, r4, #4
 8004178:	f020 0007 	bic.w	r0, r0, #7
 800417c:	1ac2      	subs	r2, r0, r3
 800417e:	bf1c      	itt	ne
 8004180:	1a1b      	subne	r3, r3, r0
 8004182:	50a3      	strne	r3, [r4, r2]
 8004184:	e7af      	b.n	80040e6 <_malloc_r+0x22>
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	42a3      	cmp	r3, r4
 800418a:	bf0c      	ite	eq
 800418c:	f8c8 2000 	streq.w	r2, [r8]
 8004190:	605a      	strne	r2, [r3, #4]
 8004192:	e7eb      	b.n	800416c <_malloc_r+0xa8>
 8004194:	4623      	mov	r3, r4
 8004196:	6864      	ldr	r4, [r4, #4]
 8004198:	e7ae      	b.n	80040f8 <_malloc_r+0x34>
 800419a:	463c      	mov	r4, r7
 800419c:	687f      	ldr	r7, [r7, #4]
 800419e:	e7b6      	b.n	800410e <_malloc_r+0x4a>
 80041a0:	461a      	mov	r2, r3
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	42a3      	cmp	r3, r4
 80041a6:	d1fb      	bne.n	80041a0 <_malloc_r+0xdc>
 80041a8:	2300      	movs	r3, #0
 80041aa:	6053      	str	r3, [r2, #4]
 80041ac:	e7de      	b.n	800416c <_malloc_r+0xa8>
 80041ae:	230c      	movs	r3, #12
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	4630      	mov	r0, r6
 80041b4:	f000 f80c 	bl	80041d0 <__malloc_unlock>
 80041b8:	e794      	b.n	80040e4 <_malloc_r+0x20>
 80041ba:	6005      	str	r5, [r0, #0]
 80041bc:	e7d6      	b.n	800416c <_malloc_r+0xa8>
 80041be:	bf00      	nop
 80041c0:	20001360 	.word	0x20001360

080041c4 <__malloc_lock>:
 80041c4:	4801      	ldr	r0, [pc, #4]	@ (80041cc <__malloc_lock+0x8>)
 80041c6:	f7ff bf0f 	b.w	8003fe8 <__retarget_lock_acquire_recursive>
 80041ca:	bf00      	nop
 80041cc:	20001358 	.word	0x20001358

080041d0 <__malloc_unlock>:
 80041d0:	4801      	ldr	r0, [pc, #4]	@ (80041d8 <__malloc_unlock+0x8>)
 80041d2:	f7ff bf0a 	b.w	8003fea <__retarget_lock_release_recursive>
 80041d6:	bf00      	nop
 80041d8:	20001358 	.word	0x20001358

080041dc <__ssputs_r>:
 80041dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	688e      	ldr	r6, [r1, #8]
 80041e2:	461f      	mov	r7, r3
 80041e4:	42be      	cmp	r6, r7
 80041e6:	680b      	ldr	r3, [r1, #0]
 80041e8:	4682      	mov	sl, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	4690      	mov	r8, r2
 80041ee:	d82d      	bhi.n	800424c <__ssputs_r+0x70>
 80041f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041f8:	d026      	beq.n	8004248 <__ssputs_r+0x6c>
 80041fa:	6965      	ldr	r5, [r4, #20]
 80041fc:	6909      	ldr	r1, [r1, #16]
 80041fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004202:	eba3 0901 	sub.w	r9, r3, r1
 8004206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800420a:	1c7b      	adds	r3, r7, #1
 800420c:	444b      	add	r3, r9
 800420e:	106d      	asrs	r5, r5, #1
 8004210:	429d      	cmp	r5, r3
 8004212:	bf38      	it	cc
 8004214:	461d      	movcc	r5, r3
 8004216:	0553      	lsls	r3, r2, #21
 8004218:	d527      	bpl.n	800426a <__ssputs_r+0x8e>
 800421a:	4629      	mov	r1, r5
 800421c:	f7ff ff52 	bl	80040c4 <_malloc_r>
 8004220:	4606      	mov	r6, r0
 8004222:	b360      	cbz	r0, 800427e <__ssputs_r+0xa2>
 8004224:	6921      	ldr	r1, [r4, #16]
 8004226:	464a      	mov	r2, r9
 8004228:	f000 fae8 	bl	80047fc <memcpy>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	6126      	str	r6, [r4, #16]
 800423a:	6165      	str	r5, [r4, #20]
 800423c:	444e      	add	r6, r9
 800423e:	eba5 0509 	sub.w	r5, r5, r9
 8004242:	6026      	str	r6, [r4, #0]
 8004244:	60a5      	str	r5, [r4, #8]
 8004246:	463e      	mov	r6, r7
 8004248:	42be      	cmp	r6, r7
 800424a:	d900      	bls.n	800424e <__ssputs_r+0x72>
 800424c:	463e      	mov	r6, r7
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	4632      	mov	r2, r6
 8004252:	4641      	mov	r1, r8
 8004254:	f000 faa8 	bl	80047a8 <memmove>
 8004258:	68a3      	ldr	r3, [r4, #8]
 800425a:	1b9b      	subs	r3, r3, r6
 800425c:	60a3      	str	r3, [r4, #8]
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	4433      	add	r3, r6
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	2000      	movs	r0, #0
 8004266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426a:	462a      	mov	r2, r5
 800426c:	f000 fad4 	bl	8004818 <_realloc_r>
 8004270:	4606      	mov	r6, r0
 8004272:	2800      	cmp	r0, #0
 8004274:	d1e0      	bne.n	8004238 <__ssputs_r+0x5c>
 8004276:	6921      	ldr	r1, [r4, #16]
 8004278:	4650      	mov	r0, sl
 800427a:	f7ff feb7 	bl	8003fec <_free_r>
 800427e:	230c      	movs	r3, #12
 8004280:	f8ca 3000 	str.w	r3, [sl]
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e7e9      	b.n	8004266 <__ssputs_r+0x8a>
	...

08004294 <_svfiprintf_r>:
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	4698      	mov	r8, r3
 800429a:	898b      	ldrh	r3, [r1, #12]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	b09d      	sub	sp, #116	@ 0x74
 80042a0:	4607      	mov	r7, r0
 80042a2:	460d      	mov	r5, r1
 80042a4:	4614      	mov	r4, r2
 80042a6:	d510      	bpl.n	80042ca <_svfiprintf_r+0x36>
 80042a8:	690b      	ldr	r3, [r1, #16]
 80042aa:	b973      	cbnz	r3, 80042ca <_svfiprintf_r+0x36>
 80042ac:	2140      	movs	r1, #64	@ 0x40
 80042ae:	f7ff ff09 	bl	80040c4 <_malloc_r>
 80042b2:	6028      	str	r0, [r5, #0]
 80042b4:	6128      	str	r0, [r5, #16]
 80042b6:	b930      	cbnz	r0, 80042c6 <_svfiprintf_r+0x32>
 80042b8:	230c      	movs	r3, #12
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b01d      	add	sp, #116	@ 0x74
 80042c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c6:	2340      	movs	r3, #64	@ 0x40
 80042c8:	616b      	str	r3, [r5, #20]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ce:	2320      	movs	r3, #32
 80042d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d8:	2330      	movs	r3, #48	@ 0x30
 80042da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004478 <_svfiprintf_r+0x1e4>
 80042de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042e2:	f04f 0901 	mov.w	r9, #1
 80042e6:	4623      	mov	r3, r4
 80042e8:	469a      	mov	sl, r3
 80042ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ee:	b10a      	cbz	r2, 80042f4 <_svfiprintf_r+0x60>
 80042f0:	2a25      	cmp	r2, #37	@ 0x25
 80042f2:	d1f9      	bne.n	80042e8 <_svfiprintf_r+0x54>
 80042f4:	ebba 0b04 	subs.w	fp, sl, r4
 80042f8:	d00b      	beq.n	8004312 <_svfiprintf_r+0x7e>
 80042fa:	465b      	mov	r3, fp
 80042fc:	4622      	mov	r2, r4
 80042fe:	4629      	mov	r1, r5
 8004300:	4638      	mov	r0, r7
 8004302:	f7ff ff6b 	bl	80041dc <__ssputs_r>
 8004306:	3001      	adds	r0, #1
 8004308:	f000 80a7 	beq.w	800445a <_svfiprintf_r+0x1c6>
 800430c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800430e:	445a      	add	r2, fp
 8004310:	9209      	str	r2, [sp, #36]	@ 0x24
 8004312:	f89a 3000 	ldrb.w	r3, [sl]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 809f 	beq.w	800445a <_svfiprintf_r+0x1c6>
 800431c:	2300      	movs	r3, #0
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004326:	f10a 0a01 	add.w	sl, sl, #1
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	9307      	str	r3, [sp, #28]
 800432e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004332:	931a      	str	r3, [sp, #104]	@ 0x68
 8004334:	4654      	mov	r4, sl
 8004336:	2205      	movs	r2, #5
 8004338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433c:	484e      	ldr	r0, [pc, #312]	@ (8004478 <_svfiprintf_r+0x1e4>)
 800433e:	f7fb ff47 	bl	80001d0 <memchr>
 8004342:	9a04      	ldr	r2, [sp, #16]
 8004344:	b9d8      	cbnz	r0, 800437e <_svfiprintf_r+0xea>
 8004346:	06d0      	lsls	r0, r2, #27
 8004348:	bf44      	itt	mi
 800434a:	2320      	movmi	r3, #32
 800434c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004350:	0711      	lsls	r1, r2, #28
 8004352:	bf44      	itt	mi
 8004354:	232b      	movmi	r3, #43	@ 0x2b
 8004356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800435a:	f89a 3000 	ldrb.w	r3, [sl]
 800435e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004360:	d015      	beq.n	800438e <_svfiprintf_r+0xfa>
 8004362:	9a07      	ldr	r2, [sp, #28]
 8004364:	4654      	mov	r4, sl
 8004366:	2000      	movs	r0, #0
 8004368:	f04f 0c0a 	mov.w	ip, #10
 800436c:	4621      	mov	r1, r4
 800436e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004372:	3b30      	subs	r3, #48	@ 0x30
 8004374:	2b09      	cmp	r3, #9
 8004376:	d94b      	bls.n	8004410 <_svfiprintf_r+0x17c>
 8004378:	b1b0      	cbz	r0, 80043a8 <_svfiprintf_r+0x114>
 800437a:	9207      	str	r2, [sp, #28]
 800437c:	e014      	b.n	80043a8 <_svfiprintf_r+0x114>
 800437e:	eba0 0308 	sub.w	r3, r0, r8
 8004382:	fa09 f303 	lsl.w	r3, r9, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	46a2      	mov	sl, r4
 800438c:	e7d2      	b.n	8004334 <_svfiprintf_r+0xa0>
 800438e:	9b03      	ldr	r3, [sp, #12]
 8004390:	1d19      	adds	r1, r3, #4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	9103      	str	r1, [sp, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	bfbb      	ittet	lt
 800439a:	425b      	neglt	r3, r3
 800439c:	f042 0202 	orrlt.w	r2, r2, #2
 80043a0:	9307      	strge	r3, [sp, #28]
 80043a2:	9307      	strlt	r3, [sp, #28]
 80043a4:	bfb8      	it	lt
 80043a6:	9204      	strlt	r2, [sp, #16]
 80043a8:	7823      	ldrb	r3, [r4, #0]
 80043aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ac:	d10a      	bne.n	80043c4 <_svfiprintf_r+0x130>
 80043ae:	7863      	ldrb	r3, [r4, #1]
 80043b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b2:	d132      	bne.n	800441a <_svfiprintf_r+0x186>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	1d1a      	adds	r2, r3, #4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	9203      	str	r2, [sp, #12]
 80043bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043c0:	3402      	adds	r4, #2
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004488 <_svfiprintf_r+0x1f4>
 80043c8:	7821      	ldrb	r1, [r4, #0]
 80043ca:	2203      	movs	r2, #3
 80043cc:	4650      	mov	r0, sl
 80043ce:	f7fb feff 	bl	80001d0 <memchr>
 80043d2:	b138      	cbz	r0, 80043e4 <_svfiprintf_r+0x150>
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	eba0 000a 	sub.w	r0, r0, sl
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	4082      	lsls	r2, r0
 80043de:	4313      	orrs	r3, r2
 80043e0:	3401      	adds	r4, #1
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e8:	4824      	ldr	r0, [pc, #144]	@ (800447c <_svfiprintf_r+0x1e8>)
 80043ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043ee:	2206      	movs	r2, #6
 80043f0:	f7fb feee 	bl	80001d0 <memchr>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d036      	beq.n	8004466 <_svfiprintf_r+0x1d2>
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <_svfiprintf_r+0x1ec>)
 80043fa:	bb1b      	cbnz	r3, 8004444 <_svfiprintf_r+0x1b0>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	3307      	adds	r3, #7
 8004400:	f023 0307 	bic.w	r3, r3, #7
 8004404:	3308      	adds	r3, #8
 8004406:	9303      	str	r3, [sp, #12]
 8004408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800440a:	4433      	add	r3, r6
 800440c:	9309      	str	r3, [sp, #36]	@ 0x24
 800440e:	e76a      	b.n	80042e6 <_svfiprintf_r+0x52>
 8004410:	fb0c 3202 	mla	r2, ip, r2, r3
 8004414:	460c      	mov	r4, r1
 8004416:	2001      	movs	r0, #1
 8004418:	e7a8      	b.n	800436c <_svfiprintf_r+0xd8>
 800441a:	2300      	movs	r3, #0
 800441c:	3401      	adds	r4, #1
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	4619      	mov	r1, r3
 8004422:	f04f 0c0a 	mov.w	ip, #10
 8004426:	4620      	mov	r0, r4
 8004428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442c:	3a30      	subs	r2, #48	@ 0x30
 800442e:	2a09      	cmp	r2, #9
 8004430:	d903      	bls.n	800443a <_svfiprintf_r+0x1a6>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0c6      	beq.n	80043c4 <_svfiprintf_r+0x130>
 8004436:	9105      	str	r1, [sp, #20]
 8004438:	e7c4      	b.n	80043c4 <_svfiprintf_r+0x130>
 800443a:	fb0c 2101 	mla	r1, ip, r1, r2
 800443e:	4604      	mov	r4, r0
 8004440:	2301      	movs	r3, #1
 8004442:	e7f0      	b.n	8004426 <_svfiprintf_r+0x192>
 8004444:	ab03      	add	r3, sp, #12
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	462a      	mov	r2, r5
 800444a:	4b0e      	ldr	r3, [pc, #56]	@ (8004484 <_svfiprintf_r+0x1f0>)
 800444c:	a904      	add	r1, sp, #16
 800444e:	4638      	mov	r0, r7
 8004450:	f3af 8000 	nop.w
 8004454:	1c42      	adds	r2, r0, #1
 8004456:	4606      	mov	r6, r0
 8004458:	d1d6      	bne.n	8004408 <_svfiprintf_r+0x174>
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	065b      	lsls	r3, r3, #25
 800445e:	f53f af2d 	bmi.w	80042bc <_svfiprintf_r+0x28>
 8004462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004464:	e72c      	b.n	80042c0 <_svfiprintf_r+0x2c>
 8004466:	ab03      	add	r3, sp, #12
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	462a      	mov	r2, r5
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <_svfiprintf_r+0x1f0>)
 800446e:	a904      	add	r1, sp, #16
 8004470:	4638      	mov	r0, r7
 8004472:	f000 f879 	bl	8004568 <_printf_i>
 8004476:	e7ed      	b.n	8004454 <_svfiprintf_r+0x1c0>
 8004478:	080048dc 	.word	0x080048dc
 800447c:	080048e6 	.word	0x080048e6
 8004480:	00000000 	.word	0x00000000
 8004484:	080041dd 	.word	0x080041dd
 8004488:	080048e2 	.word	0x080048e2

0800448c <_printf_common>:
 800448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	4616      	mov	r6, r2
 8004492:	4698      	mov	r8, r3
 8004494:	688a      	ldr	r2, [r1, #8]
 8004496:	690b      	ldr	r3, [r1, #16]
 8004498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800449c:	4293      	cmp	r3, r2
 800449e:	bfb8      	it	lt
 80044a0:	4613      	movlt	r3, r2
 80044a2:	6033      	str	r3, [r6, #0]
 80044a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044a8:	4607      	mov	r7, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	b10a      	cbz	r2, 80044b2 <_printf_common+0x26>
 80044ae:	3301      	adds	r3, #1
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	0699      	lsls	r1, r3, #26
 80044b6:	bf42      	ittt	mi
 80044b8:	6833      	ldrmi	r3, [r6, #0]
 80044ba:	3302      	addmi	r3, #2
 80044bc:	6033      	strmi	r3, [r6, #0]
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	f015 0506 	ands.w	r5, r5, #6
 80044c4:	d106      	bne.n	80044d4 <_printf_common+0x48>
 80044c6:	f104 0a19 	add.w	sl, r4, #25
 80044ca:	68e3      	ldr	r3, [r4, #12]
 80044cc:	6832      	ldr	r2, [r6, #0]
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	42ab      	cmp	r3, r5
 80044d2:	dc26      	bgt.n	8004522 <_printf_common+0x96>
 80044d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	3b00      	subs	r3, #0
 80044dc:	bf18      	it	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	0692      	lsls	r2, r2, #26
 80044e2:	d42b      	bmi.n	800453c <_printf_common+0xb0>
 80044e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044e8:	4641      	mov	r1, r8
 80044ea:	4638      	mov	r0, r7
 80044ec:	47c8      	blx	r9
 80044ee:	3001      	adds	r0, #1
 80044f0:	d01e      	beq.n	8004530 <_printf_common+0xa4>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	6922      	ldr	r2, [r4, #16]
 80044f6:	f003 0306 	and.w	r3, r3, #6
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	bf02      	ittt	eq
 80044fe:	68e5      	ldreq	r5, [r4, #12]
 8004500:	6833      	ldreq	r3, [r6, #0]
 8004502:	1aed      	subeq	r5, r5, r3
 8004504:	68a3      	ldr	r3, [r4, #8]
 8004506:	bf0c      	ite	eq
 8004508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800450c:	2500      	movne	r5, #0
 800450e:	4293      	cmp	r3, r2
 8004510:	bfc4      	itt	gt
 8004512:	1a9b      	subgt	r3, r3, r2
 8004514:	18ed      	addgt	r5, r5, r3
 8004516:	2600      	movs	r6, #0
 8004518:	341a      	adds	r4, #26
 800451a:	42b5      	cmp	r5, r6
 800451c:	d11a      	bne.n	8004554 <_printf_common+0xc8>
 800451e:	2000      	movs	r0, #0
 8004520:	e008      	b.n	8004534 <_printf_common+0xa8>
 8004522:	2301      	movs	r3, #1
 8004524:	4652      	mov	r2, sl
 8004526:	4641      	mov	r1, r8
 8004528:	4638      	mov	r0, r7
 800452a:	47c8      	blx	r9
 800452c:	3001      	adds	r0, #1
 800452e:	d103      	bne.n	8004538 <_printf_common+0xac>
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	3501      	adds	r5, #1
 800453a:	e7c6      	b.n	80044ca <_printf_common+0x3e>
 800453c:	18e1      	adds	r1, r4, r3
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	2030      	movs	r0, #48	@ 0x30
 8004542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004546:	4422      	add	r2, r4
 8004548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800454c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004550:	3302      	adds	r3, #2
 8004552:	e7c7      	b.n	80044e4 <_printf_common+0x58>
 8004554:	2301      	movs	r3, #1
 8004556:	4622      	mov	r2, r4
 8004558:	4641      	mov	r1, r8
 800455a:	4638      	mov	r0, r7
 800455c:	47c8      	blx	r9
 800455e:	3001      	adds	r0, #1
 8004560:	d0e6      	beq.n	8004530 <_printf_common+0xa4>
 8004562:	3601      	adds	r6, #1
 8004564:	e7d9      	b.n	800451a <_printf_common+0x8e>
	...

08004568 <_printf_i>:
 8004568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	7e0f      	ldrb	r7, [r1, #24]
 800456e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004570:	2f78      	cmp	r7, #120	@ 0x78
 8004572:	4691      	mov	r9, r2
 8004574:	4680      	mov	r8, r0
 8004576:	460c      	mov	r4, r1
 8004578:	469a      	mov	sl, r3
 800457a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800457e:	d807      	bhi.n	8004590 <_printf_i+0x28>
 8004580:	2f62      	cmp	r7, #98	@ 0x62
 8004582:	d80a      	bhi.n	800459a <_printf_i+0x32>
 8004584:	2f00      	cmp	r7, #0
 8004586:	f000 80d2 	beq.w	800472e <_printf_i+0x1c6>
 800458a:	2f58      	cmp	r7, #88	@ 0x58
 800458c:	f000 80b9 	beq.w	8004702 <_printf_i+0x19a>
 8004590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004598:	e03a      	b.n	8004610 <_printf_i+0xa8>
 800459a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800459e:	2b15      	cmp	r3, #21
 80045a0:	d8f6      	bhi.n	8004590 <_printf_i+0x28>
 80045a2:	a101      	add	r1, pc, #4	@ (adr r1, 80045a8 <_printf_i+0x40>)
 80045a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045a8:	08004601 	.word	0x08004601
 80045ac:	08004615 	.word	0x08004615
 80045b0:	08004591 	.word	0x08004591
 80045b4:	08004591 	.word	0x08004591
 80045b8:	08004591 	.word	0x08004591
 80045bc:	08004591 	.word	0x08004591
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004591 	.word	0x08004591
 80045c8:	08004591 	.word	0x08004591
 80045cc:	08004591 	.word	0x08004591
 80045d0:	08004591 	.word	0x08004591
 80045d4:	08004715 	.word	0x08004715
 80045d8:	0800463f 	.word	0x0800463f
 80045dc:	080046cf 	.word	0x080046cf
 80045e0:	08004591 	.word	0x08004591
 80045e4:	08004591 	.word	0x08004591
 80045e8:	08004737 	.word	0x08004737
 80045ec:	08004591 	.word	0x08004591
 80045f0:	0800463f 	.word	0x0800463f
 80045f4:	08004591 	.word	0x08004591
 80045f8:	08004591 	.word	0x08004591
 80045fc:	080046d7 	.word	0x080046d7
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6032      	str	r2, [r6, #0]
 8004608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800460c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004610:	2301      	movs	r3, #1
 8004612:	e09d      	b.n	8004750 <_printf_i+0x1e8>
 8004614:	6833      	ldr	r3, [r6, #0]
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	1d19      	adds	r1, r3, #4
 800461a:	6031      	str	r1, [r6, #0]
 800461c:	0606      	lsls	r6, r0, #24
 800461e:	d501      	bpl.n	8004624 <_printf_i+0xbc>
 8004620:	681d      	ldr	r5, [r3, #0]
 8004622:	e003      	b.n	800462c <_printf_i+0xc4>
 8004624:	0645      	lsls	r5, r0, #25
 8004626:	d5fb      	bpl.n	8004620 <_printf_i+0xb8>
 8004628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800462c:	2d00      	cmp	r5, #0
 800462e:	da03      	bge.n	8004638 <_printf_i+0xd0>
 8004630:	232d      	movs	r3, #45	@ 0x2d
 8004632:	426d      	negs	r5, r5
 8004634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004638:	4859      	ldr	r0, [pc, #356]	@ (80047a0 <_printf_i+0x238>)
 800463a:	230a      	movs	r3, #10
 800463c:	e011      	b.n	8004662 <_printf_i+0xfa>
 800463e:	6821      	ldr	r1, [r4, #0]
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	0608      	lsls	r0, r1, #24
 8004644:	f853 5b04 	ldr.w	r5, [r3], #4
 8004648:	d402      	bmi.n	8004650 <_printf_i+0xe8>
 800464a:	0649      	lsls	r1, r1, #25
 800464c:	bf48      	it	mi
 800464e:	b2ad      	uxthmi	r5, r5
 8004650:	2f6f      	cmp	r7, #111	@ 0x6f
 8004652:	4853      	ldr	r0, [pc, #332]	@ (80047a0 <_printf_i+0x238>)
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	bf14      	ite	ne
 8004658:	230a      	movne	r3, #10
 800465a:	2308      	moveq	r3, #8
 800465c:	2100      	movs	r1, #0
 800465e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004662:	6866      	ldr	r6, [r4, #4]
 8004664:	60a6      	str	r6, [r4, #8]
 8004666:	2e00      	cmp	r6, #0
 8004668:	bfa2      	ittt	ge
 800466a:	6821      	ldrge	r1, [r4, #0]
 800466c:	f021 0104 	bicge.w	r1, r1, #4
 8004670:	6021      	strge	r1, [r4, #0]
 8004672:	b90d      	cbnz	r5, 8004678 <_printf_i+0x110>
 8004674:	2e00      	cmp	r6, #0
 8004676:	d04b      	beq.n	8004710 <_printf_i+0x1a8>
 8004678:	4616      	mov	r6, r2
 800467a:	fbb5 f1f3 	udiv	r1, r5, r3
 800467e:	fb03 5711 	mls	r7, r3, r1, r5
 8004682:	5dc7      	ldrb	r7, [r0, r7]
 8004684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004688:	462f      	mov	r7, r5
 800468a:	42bb      	cmp	r3, r7
 800468c:	460d      	mov	r5, r1
 800468e:	d9f4      	bls.n	800467a <_printf_i+0x112>
 8004690:	2b08      	cmp	r3, #8
 8004692:	d10b      	bne.n	80046ac <_printf_i+0x144>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	07df      	lsls	r7, r3, #31
 8004698:	d508      	bpl.n	80046ac <_printf_i+0x144>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	6861      	ldr	r1, [r4, #4]
 800469e:	4299      	cmp	r1, r3
 80046a0:	bfde      	ittt	le
 80046a2:	2330      	movle	r3, #48	@ 0x30
 80046a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046ac:	1b92      	subs	r2, r2, r6
 80046ae:	6122      	str	r2, [r4, #16]
 80046b0:	f8cd a000 	str.w	sl, [sp]
 80046b4:	464b      	mov	r3, r9
 80046b6:	aa03      	add	r2, sp, #12
 80046b8:	4621      	mov	r1, r4
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7ff fee6 	bl	800448c <_printf_common>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d14a      	bne.n	800475a <_printf_i+0x1f2>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	b004      	add	sp, #16
 80046ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f043 0320 	orr.w	r3, r3, #32
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	4833      	ldr	r0, [pc, #204]	@ (80047a4 <_printf_i+0x23c>)
 80046d8:	2778      	movs	r7, #120	@ 0x78
 80046da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6831      	ldr	r1, [r6, #0]
 80046e2:	061f      	lsls	r7, r3, #24
 80046e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80046e8:	d402      	bmi.n	80046f0 <_printf_i+0x188>
 80046ea:	065f      	lsls	r7, r3, #25
 80046ec:	bf48      	it	mi
 80046ee:	b2ad      	uxthmi	r5, r5
 80046f0:	6031      	str	r1, [r6, #0]
 80046f2:	07d9      	lsls	r1, r3, #31
 80046f4:	bf44      	itt	mi
 80046f6:	f043 0320 	orrmi.w	r3, r3, #32
 80046fa:	6023      	strmi	r3, [r4, #0]
 80046fc:	b11d      	cbz	r5, 8004706 <_printf_i+0x19e>
 80046fe:	2310      	movs	r3, #16
 8004700:	e7ac      	b.n	800465c <_printf_i+0xf4>
 8004702:	4827      	ldr	r0, [pc, #156]	@ (80047a0 <_printf_i+0x238>)
 8004704:	e7e9      	b.n	80046da <_printf_i+0x172>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	f023 0320 	bic.w	r3, r3, #32
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	e7f6      	b.n	80046fe <_printf_i+0x196>
 8004710:	4616      	mov	r6, r2
 8004712:	e7bd      	b.n	8004690 <_printf_i+0x128>
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	6825      	ldr	r5, [r4, #0]
 8004718:	6961      	ldr	r1, [r4, #20]
 800471a:	1d18      	adds	r0, r3, #4
 800471c:	6030      	str	r0, [r6, #0]
 800471e:	062e      	lsls	r6, r5, #24
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	d501      	bpl.n	8004728 <_printf_i+0x1c0>
 8004724:	6019      	str	r1, [r3, #0]
 8004726:	e002      	b.n	800472e <_printf_i+0x1c6>
 8004728:	0668      	lsls	r0, r5, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0x1bc>
 800472c:	8019      	strh	r1, [r3, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	4616      	mov	r6, r2
 8004734:	e7bc      	b.n	80046b0 <_printf_i+0x148>
 8004736:	6833      	ldr	r3, [r6, #0]
 8004738:	1d1a      	adds	r2, r3, #4
 800473a:	6032      	str	r2, [r6, #0]
 800473c:	681e      	ldr	r6, [r3, #0]
 800473e:	6862      	ldr	r2, [r4, #4]
 8004740:	2100      	movs	r1, #0
 8004742:	4630      	mov	r0, r6
 8004744:	f7fb fd44 	bl	80001d0 <memchr>
 8004748:	b108      	cbz	r0, 800474e <_printf_i+0x1e6>
 800474a:	1b80      	subs	r0, r0, r6
 800474c:	6060      	str	r0, [r4, #4]
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	6123      	str	r3, [r4, #16]
 8004752:	2300      	movs	r3, #0
 8004754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004758:	e7aa      	b.n	80046b0 <_printf_i+0x148>
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	4632      	mov	r2, r6
 800475e:	4649      	mov	r1, r9
 8004760:	4640      	mov	r0, r8
 8004762:	47d0      	blx	sl
 8004764:	3001      	adds	r0, #1
 8004766:	d0ad      	beq.n	80046c4 <_printf_i+0x15c>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	079b      	lsls	r3, r3, #30
 800476c:	d413      	bmi.n	8004796 <_printf_i+0x22e>
 800476e:	68e0      	ldr	r0, [r4, #12]
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	4298      	cmp	r0, r3
 8004774:	bfb8      	it	lt
 8004776:	4618      	movlt	r0, r3
 8004778:	e7a6      	b.n	80046c8 <_printf_i+0x160>
 800477a:	2301      	movs	r3, #1
 800477c:	4632      	mov	r2, r6
 800477e:	4649      	mov	r1, r9
 8004780:	4640      	mov	r0, r8
 8004782:	47d0      	blx	sl
 8004784:	3001      	adds	r0, #1
 8004786:	d09d      	beq.n	80046c4 <_printf_i+0x15c>
 8004788:	3501      	adds	r5, #1
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	9903      	ldr	r1, [sp, #12]
 800478e:	1a5b      	subs	r3, r3, r1
 8004790:	42ab      	cmp	r3, r5
 8004792:	dcf2      	bgt.n	800477a <_printf_i+0x212>
 8004794:	e7eb      	b.n	800476e <_printf_i+0x206>
 8004796:	2500      	movs	r5, #0
 8004798:	f104 0619 	add.w	r6, r4, #25
 800479c:	e7f5      	b.n	800478a <_printf_i+0x222>
 800479e:	bf00      	nop
 80047a0:	080048ed 	.word	0x080048ed
 80047a4:	080048fe 	.word	0x080048fe

080047a8 <memmove>:
 80047a8:	4288      	cmp	r0, r1
 80047aa:	b510      	push	{r4, lr}
 80047ac:	eb01 0402 	add.w	r4, r1, r2
 80047b0:	d902      	bls.n	80047b8 <memmove+0x10>
 80047b2:	4284      	cmp	r4, r0
 80047b4:	4623      	mov	r3, r4
 80047b6:	d807      	bhi.n	80047c8 <memmove+0x20>
 80047b8:	1e43      	subs	r3, r0, #1
 80047ba:	42a1      	cmp	r1, r4
 80047bc:	d008      	beq.n	80047d0 <memmove+0x28>
 80047be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047c6:	e7f8      	b.n	80047ba <memmove+0x12>
 80047c8:	4402      	add	r2, r0
 80047ca:	4601      	mov	r1, r0
 80047cc:	428a      	cmp	r2, r1
 80047ce:	d100      	bne.n	80047d2 <memmove+0x2a>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047da:	e7f7      	b.n	80047cc <memmove+0x24>

080047dc <_sbrk_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d06      	ldr	r5, [pc, #24]	@ (80047f8 <_sbrk_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fc fbb6 	bl	8000f58 <_sbrk>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_sbrk_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_sbrk_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20001354 	.word	0x20001354

080047fc <memcpy>:
 80047fc:	440a      	add	r2, r1
 80047fe:	4291      	cmp	r1, r2
 8004800:	f100 33ff 	add.w	r3, r0, #4294967295
 8004804:	d100      	bne.n	8004808 <memcpy+0xc>
 8004806:	4770      	bx	lr
 8004808:	b510      	push	{r4, lr}
 800480a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004812:	4291      	cmp	r1, r2
 8004814:	d1f9      	bne.n	800480a <memcpy+0xe>
 8004816:	bd10      	pop	{r4, pc}

08004818 <_realloc_r>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	4680      	mov	r8, r0
 800481e:	4615      	mov	r5, r2
 8004820:	460c      	mov	r4, r1
 8004822:	b921      	cbnz	r1, 800482e <_realloc_r+0x16>
 8004824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004828:	4611      	mov	r1, r2
 800482a:	f7ff bc4b 	b.w	80040c4 <_malloc_r>
 800482e:	b92a      	cbnz	r2, 800483c <_realloc_r+0x24>
 8004830:	f7ff fbdc 	bl	8003fec <_free_r>
 8004834:	2400      	movs	r4, #0
 8004836:	4620      	mov	r0, r4
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	f000 f81a 	bl	8004874 <_malloc_usable_size_r>
 8004840:	4285      	cmp	r5, r0
 8004842:	4606      	mov	r6, r0
 8004844:	d802      	bhi.n	800484c <_realloc_r+0x34>
 8004846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800484a:	d8f4      	bhi.n	8004836 <_realloc_r+0x1e>
 800484c:	4629      	mov	r1, r5
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff fc38 	bl	80040c4 <_malloc_r>
 8004854:	4607      	mov	r7, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d0ec      	beq.n	8004834 <_realloc_r+0x1c>
 800485a:	42b5      	cmp	r5, r6
 800485c:	462a      	mov	r2, r5
 800485e:	4621      	mov	r1, r4
 8004860:	bf28      	it	cs
 8004862:	4632      	movcs	r2, r6
 8004864:	f7ff ffca 	bl	80047fc <memcpy>
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fbbe 	bl	8003fec <_free_r>
 8004870:	463c      	mov	r4, r7
 8004872:	e7e0      	b.n	8004836 <_realloc_r+0x1e>

08004874 <_malloc_usable_size_r>:
 8004874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004878:	1f18      	subs	r0, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfbc      	itt	lt
 800487e:	580b      	ldrlt	r3, [r1, r0]
 8004880:	18c0      	addlt	r0, r0, r3
 8004882:	4770      	bx	lr

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
