
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b7c  08003b7c  00004b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b9c  08003b9c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003ba4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          0000112c  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001140  20001140  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a618  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a80  00000000  00000000  0000f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066d  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001839  00000000  00000000  00011fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a198  00000000  00000000  000137ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba64b  00000000  00000000  0001d986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7fd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f8  00000000  00000000  000d8014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000da20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b64 	.word	0x08003b64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003b64 	.word	0x08003b64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc7a 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f82a 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f92c 	bl	8000720 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004c8:	f000 f890 	bl	80005ec <MX_CAN1_Init>
  MX_CAN2_Init();
 80004cc:	f000 f8c6 	bl	800065c <MX_CAN2_Init>
  MX_USART3_UART_Init();
 80004d0:	f000 f8fc 	bl	80006cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 80004d4:	f000 f9fa 	bl	80008cc <MX_CAN1_Setup>
  MX_CAN2_Setup();
 80004d8:	f000 fa32 	bl	8000940 <MX_CAN2_Setup>
//  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
  HAL_CAN_Start(&hcan1);
 80004dc:	480b      	ldr	r0, [pc, #44]	@ (800050c <main+0x54>)
 80004de:	f000 fedb 	bl	8001298 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan1);
 80004e2:	480a      	ldr	r0, [pc, #40]	@ (800050c <main+0x54>)
 80004e4:	f000 fed8 	bl	8001298 <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		CAN1_Transmit();
 80004e8:	f000 f9aa 	bl	8000840 <CAN1_Transmit>
	//	CAN1_Receive();
	//	CAN2_Transmit();
		CAN2_Receive();
 80004ec:	f000 f9d0 	bl	8000890 <CAN2_Receive>
		if(CAN2_DATA_RX[7] == 0x08){
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <main+0x58>)
 80004f2:	79db      	ldrb	r3, [r3, #7]
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d103      	bne.n	8000500 <main+0x48>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004f8:	2101      	movs	r1, #1
 80004fa:	4806      	ldr	r0, [pc, #24]	@ (8000514 <main+0x5c>)
 80004fc:	f001 febb 	bl	8002276 <HAL_GPIO_TogglePin>
//      MX_CAN1_Setup();
//      MX_CAN2_Setup();
//      USART3_SendString((uint8_t *)"-> IG ON \n");
//      delay(20);
//    }
	HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000504:	f000 fcc8 	bl	8000e98 <HAL_Delay>
		CAN1_Transmit();
 8000508:	e7ee      	b.n	80004e8 <main+0x30>
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	2000112c 	.word	0x2000112c
 8000514:	40020400 	.word	0x40020400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 faf0 	bl	8003b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	@ 0xa8
 800058e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fea9 	bl	80022f4 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 fa22 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f90a 	bl	80027e4 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 fa0b 	bl	80009f0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	@ 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <MX_CAN1_Init+0x68>)
 80005f2:	4a19      	ldr	r2, [pc, #100]	@ (8000658 <MX_CAN1_Init+0x6c>)
 80005f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_CAN1_Init+0x68>)
 80005f8:	220e      	movs	r2, #14
 80005fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_CAN1_Init+0x68>)
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000602:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000606:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800060a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_CAN1_Init+0x68>)
 800060e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000612:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000616:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800061a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <MX_CAN1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_CAN1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_CAN1_Init+0x68>)
 8000642:	f000 fc4d 	bl	8000ee0 <HAL_CAN_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 f9d0 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000030 	.word	0x20000030
 8000658:	40006400 	.word	0x40006400

0800065c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000662:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <MX_CAN2_Init+0x6c>)
 8000664:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 14;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000668:	220e      	movs	r2, #14
 800066a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_CAN2_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000674:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000678:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_CAN2_Init+0x68>)
 800067c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000680:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000684:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000688:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_CAN2_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_CAN2_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_CAN2_Init+0x68>)
 800069e:	2200      	movs	r2, #0
 80006a0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_CAN2_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_CAN2_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_CAN2_Init+0x68>)
 80006b0:	f000 fc16 	bl	8000ee0 <HAL_CAN_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80006ba:	f000 f999 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000058 	.word	0x20000058
 80006c8:	40006800 	.word	0x40006800

080006cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_USART3_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USART3_UART_Init+0x4c>)
 8000704:	f002 fa8e 	bl	8002c24 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f96f 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000080 	.word	0x20000080
 800071c:	40004800 	.word	0x40004800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b3d      	ldr	r3, [pc, #244]	@ (8000830 <MX_GPIO_Init+0x110>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a3c      	ldr	r2, [pc, #240]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b3a      	ldr	r3, [pc, #232]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b36      	ldr	r3, [pc, #216]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a35      	ldr	r2, [pc, #212]	@ (8000830 <MX_GPIO_Init+0x110>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b33      	ldr	r3, [pc, #204]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b2f      	ldr	r3, [pc, #188]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a2e      	ldr	r2, [pc, #184]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b2c      	ldr	r3, [pc, #176]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <MX_GPIO_Init+0x110>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <MX_GPIO_Init+0x110>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	4822      	ldr	r0, [pc, #136]	@ (8000834 <MX_GPIO_Init+0x114>)
 80007ac:	f001 fd4a 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007b0:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 80007b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x118>)
 80007c6:	f001 fba1 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4817      	ldr	r0, [pc, #92]	@ (800083c <MX_GPIO_Init+0x11c>)
 80007e0:	f001 fb94 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007e4:	2302      	movs	r3, #2
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_GPIO_Init+0x11c>)
 80007f8:	f001 fb88 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007fc:	2301      	movs	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_GPIO_Init+0x114>)
 8000814:	f001 fb7a 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	2006      	movs	r0, #6
 800081e:	f001 faac 	bl	8001d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000822:	2006      	movs	r0, #6
 8000824:	f001 fac5 	bl	8001db2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	40020000 	.word	0x40020000

08000840 <CAN1_Transmit>:

/* USER CODE BEGIN 4 */

void CAN1_Transmit() {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  CAN1_TxHeader.StdId = 0x103;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <CAN1_Transmit+0x40>)
 8000846:	f240 1203 	movw	r2, #259	@ 0x103
 800084a:	601a      	str	r2, [r3, #0]
  CAN1_TxHeader.ExtId = 0x01;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <CAN1_Transmit+0x40>)
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  CAN1_TxHeader.RTR = CAN_RTR_DATA;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <CAN1_Transmit+0x40>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  CAN1_TxHeader.IDE = CAN_ID_STD;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <CAN1_Transmit+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  CAN1_TxHeader.DLC = 8;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <CAN1_Transmit+0x40>)
 8000860:	2208      	movs	r2, #8
 8000862:	611a      	str	r2, [r3, #16]

  if (HAL_CAN_AddTxMessage(&hcan1, &CAN1_TxHeader,CAN1_DATA_TX, (uint32_t *)CAN1_TxMailbox) != HAL_OK)
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <CAN1_Transmit+0x44>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <CAN1_Transmit+0x48>)
 800086a:	4905      	ldr	r1, [pc, #20]	@ (8000880 <CAN1_Transmit+0x40>)
 800086c:	4807      	ldr	r0, [pc, #28]	@ (800088c <CAN1_Transmit+0x4c>)
 800086e:	f000 fd57 	bl	8001320 <HAL_CAN_AddTxMessage>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <CAN1_Transmit+0x3c>
  {
     Error_Handler ();
 8000878:	f000 f8ba 	bl	80009f0 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000c8 	.word	0x200000c8
 8000884:	20000118 	.word	0x20000118
 8000888:	20000000 	.word	0x20000000
 800088c:	20000030 	.word	0x20000030

08000890 <CAN2_Receive>:
  {
     Error_Handler ();
  }
}

void CAN2_Receive() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000894:	2102      	movs	r1, #2
 8000896:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <CAN2_Receive+0x30>)
 8000898:	f000 ff34 	bl	8001704 <HAL_CAN_ActivateNotification>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <CAN2_Receive+0x16>
    {
  	  Error_Handler();
 80008a2:	f000 f8a5 	bl	80009f0 <Error_Handler>
    }
  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_RxHeader, CAN2_DATA_RX) != HAL_OK)
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <CAN2_Receive+0x34>)
 80008a8:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <CAN2_Receive+0x38>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <CAN2_Receive+0x30>)
 80008ae:	f000 fe07 	bl	80014c0 <HAL_CAN_GetRxMessage>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <CAN2_Receive+0x2c>
  {
	  Error_Handler();
 80008b8:	f000 f89a 	bl	80009f0 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000058 	.word	0x20000058
 80008c4:	2000112c 	.word	0x2000112c
 80008c8:	200000fc 	.word	0x200000fc

080008cc <MX_CAN1_Setup>:

void MX_CAN1_Setup()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2228      	movs	r2, #40	@ 0x28
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f917 	bl	8003b0c <memset>
	  /* USER CODE BEGIN CAN2_Init 0 */
	  sFilterConfig.FilterBank = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8000902:	230e      	movs	r3, #14
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_CAN1_Setup+0x70>)
 800090c:	f000 fbe4 	bl	80010d8 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <MX_CAN1_Setup+0x70>)
 8000916:	f000 fbdf 	bl	80010d8 <HAL_CAN_ConfigFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_CAN1_Setup+0x58>
	    {
	      Error_Handler();
 8000920:	f000 f866 	bl	80009f0 <Error_Handler>
	    }
	HAL_CAN_Start(&hcan1);
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_CAN1_Setup+0x70>)
 8000926:	f000 fcb7 	bl	8001298 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800092a:	2102      	movs	r1, #2
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <MX_CAN1_Setup+0x70>)
 800092e:	f000 fee9 	bl	8001704 <HAL_CAN_ActivateNotification>
}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	@ 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000030 	.word	0x20000030

08000940 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2228      	movs	r2, #40	@ 0x28
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f003 f8dd 	bl	8003b0c <memset>
	  /* USER CODE BEGIN CAN1_Init 0 */
	  sFilterConfig.FilterBank = 14;
 8000952:	230e      	movs	r3, #14
 8000954:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8000976:	230e      	movs	r3, #14
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <MX_CAN2_Setup+0x70>)
 8000980:	f000 fbaa 	bl	80010d8 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <MX_CAN2_Setup+0x70>)
 800098a:	f000 fba5 	bl	80010d8 <HAL_CAN_ConfigFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_CAN2_Setup+0x58>
	      {
	        Error_Handler();
 8000994:	f000 f82c 	bl	80009f0 <Error_Handler>
	      }
	HAL_CAN_Start(&hcan2);
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_CAN2_Setup+0x70>)
 800099a:	f000 fc7d 	bl	8001298 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800099e:	2102      	movs	r1, #2
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <MX_CAN2_Setup+0x70>)
 80009a2:	f000 feaf 	bl	8001704 <HAL_CAN_ActivateNotification>
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000058 	.word	0x20000058

080009b4 <HAL_UART_RxCpltCallback>:
//	}
//	bufsend[29] = '\n';
//	USART3_SendString((unsigned char*)bufsend);
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_UART_RxCpltCallback+0x30>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_UART_RxCpltCallback+0x34>)
 80009c4:	7819      	ldrb	r1, [r3, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_UART_RxCpltCallback+0x38>)
 80009c8:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_UART_RxCpltCallback+0x30>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <HAL_UART_RxCpltCallback+0x30>)
 80009d4:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000011c 	.word	0x2000011c
 80009e8:	20001120 	.word	0x20001120
 80009ec:	20000120 	.word	0x20000120

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a4a      	ldr	r2, [pc, #296]	@ (8000b94 <HAL_CAN_MspInit+0x148>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d13e      	bne.n	8000aec <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a48      	ldr	r2, [pc, #288]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000a76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a78:	4b47      	ldr	r3, [pc, #284]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10d      	bne.n	8000a9c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	4b45      	ldr	r3, [pc, #276]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a44      	ldr	r2, [pc, #272]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aac:	4b3b      	ldr	r3, [pc, #236]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ab8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aca:	2309      	movs	r3, #9
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	@ (8000ba0 <HAL_CAN_MspInit+0x154>)
 8000ad6:	f001 fa19 	bl	8001f0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2102      	movs	r1, #2
 8000ade:	2014      	movs	r0, #20
 8000ae0:	f001 f94b 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f001 f964 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000aea:	e04f      	b.n	8000b8c <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba4 <HAL_CAN_MspInit+0x158>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d14a      	bne.n	8000b8c <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a27      	ldr	r2, [pc, #156]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000b1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <HAL_CAN_MspInit+0x14c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10d      	bne.n	8000b40 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_CAN_MspInit+0x150>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b5c:	2360      	movs	r3, #96	@ 0x60
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <HAL_CAN_MspInit+0x15c>)
 8000b78:	f001 f9c8 	bl	8001f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	2040      	movs	r0, #64	@ 0x40
 8000b82:	f001 f8fa 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000b86:	2040      	movs	r0, #64	@ 0x40
 8000b88:	f001 f913 	bl	8001db2 <HAL_NVIC_EnableIRQ>
}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	@ 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40006400 	.word	0x40006400
 8000b98:	20001138 	.word	0x20001138
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40006800 	.word	0x40006800
 8000ba8:	40020400 	.word	0x40020400

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <HAL_UART_MspInit+0x94>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d134      	bne.n	8000c38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <HAL_UART_MspInit+0x9c>)
 8000c24:	f001 f972 	bl	8001f0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2027      	movs	r0, #39	@ 0x27
 8000c2e:	f001 f8a4 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c32:	2027      	movs	r0, #39	@ 0x27
 8000c34:	f001 f8bd 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004800 	.word	0x40004800
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f8d8 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <SysTick_Handler+0x18>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a02      	ldr	r2, [pc, #8]	@ (8000cb8 <SysTick_Handler+0x18>)
 8000cb0:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20001134 	.word	0x20001134

08000cbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f001 faf3 	bl	80022ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <CAN1_RX0_IRQHandler+0x1c>)
 8000cd2:	f000 fd3d 	bl	8001750 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_RxHeader, CAN1_DATA_RX);
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <CAN1_RX0_IRQHandler+0x20>)
 8000cd8:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <CAN1_RX0_IRQHandler+0x24>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <CAN1_RX0_IRQHandler+0x1c>)
 8000cde:	f000 fbef 	bl	80014c0 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000030 	.word	0x20000030
 8000cec:	20001124 	.word	0x20001124
 8000cf0:	200000e0 	.word	0x200000e0

08000cf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <USART3_IRQHandler+0x18>)
 8000cfa:	f002 f809 	bl	8002d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4903      	ldr	r1, [pc, #12]	@ (8000d10 <USART3_IRQHandler+0x1c>)
 8000d02:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <USART3_IRQHandler+0x18>)
 8000d04:	f001 ffde 	bl	8002cc4 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000080 	.word	0x20000080
 8000d10:	20001120 	.word	0x20001120

08000d14 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <CAN2_RX0_IRQHandler+0x1c>)
 8000d1a:	f000 fd19 	bl	8001750 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_RxHeader, CAN2_DATA_RX);
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <CAN2_RX0_IRQHandler+0x20>)
 8000d20:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <CAN2_RX0_IRQHandler+0x24>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN2_RX0_IRQHandler+0x1c>)
 8000d26:	f000 fbcb 	bl	80014c0 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000058 	.word	0x20000058
 8000d34:	2000112c 	.word	0x2000112c
 8000d38:	200000fc 	.word	0x200000fc

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d66:	490e      	ldr	r1, [pc, #56]	@ (8000da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d68:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8a:	f7ff ffd7 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f002 fec5 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fb91 	bl	80004b8 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000da4:	08003ba4 	.word	0x08003ba4
  ldr r2, =_sbss
 8000da8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dac:	20001140 	.word	0x20001140

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 ffc1 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fe08 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ffd9 	bl	8001dce <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 ffa1 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	2000000c 	.word	0x2000000c

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	2000113c 	.word	0x2000113c

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000113c 	.word	0x2000113c

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000010 	.word	0x20000010

08000ee0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e0ed      	b.n	80010ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fda4 	bl	8000a4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f14:	f7ff ffb4 	bl	8000e80 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1a:	e012      	b.n	8000f42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f1c:	f7ff ffb0 	bl	8000e80 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0c5      	b.n	80010ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0e5      	beq.n	8000f1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0202 	bic.w	r2, r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f60:	f7ff ff8e 	bl	8000e80 <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f66:	e012      	b.n	8000f8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f68:	f7ff ff8a 	bl	8000e80 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d90b      	bls.n	8000f8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2205      	movs	r2, #5
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e09f      	b.n	80010ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e5      	bne.n	8000f68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e1b      	ldrb	r3, [r3, #24]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d108      	bne.n	8000fb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e007      	b.n	8000fc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7e5b      	ldrb	r3, [r3, #25]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e007      	b.n	8000ff0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e9b      	ldrb	r3, [r3, #26]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d108      	bne.n	800100a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e007      	b.n	800101a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0220 	bic.w	r2, r2, #32
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7edb      	ldrb	r3, [r3, #27]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0210 	bic.w	r2, r2, #16
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e007      	b.n	8001044 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0210 	orr.w	r2, r2, #16
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7f1b      	ldrb	r3, [r3, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0208 	orr.w	r2, r2, #8
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0208 	bic.w	r2, r2, #8
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7f5b      	ldrb	r3, [r3, #29]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0204 	orr.w	r2, r2, #4
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0204 	bic.w	r2, r2, #4
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	ea42 0103 	orr.w	r1, r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d003      	beq.n	80010fe <HAL_CAN_ConfigFilter+0x26>
 80010f6:	7cfb      	ldrb	r3, [r7, #19]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	f040 80be 	bne.w	800127a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010fe:	4b65      	ldr	r3, [pc, #404]	@ (8001294 <HAL_CAN_ConfigFilter+0x1bc>)
 8001100:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001118:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	431a      	orrs	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	2201      	movs	r2, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d123      	bne.n	80011a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001182:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3248      	adds	r2, #72	@ 0x48
 8001188:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800119c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800119e:	6979      	ldr	r1, [r7, #20]
 80011a0:	3348      	adds	r3, #72	@ 0x48
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d122      	bne.n	80011f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3248      	adds	r2, #72	@ 0x48
 80011d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ec:	6979      	ldr	r1, [r7, #20]
 80011ee:	3348      	adds	r3, #72	@ 0x48
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001210:	e007      	b.n	8001222 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	431a      	orrs	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	401a      	ands	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800123c:	e007      	b.n	800124e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800126c:	f023 0201 	bic.w	r2, r3, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e006      	b.n	8001288 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40006400 	.word	0x40006400

08001298 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d12e      	bne.n	800130a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fddc 	bl	8000e80 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ca:	e012      	b.n	80012f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012cc:	f7ff fdd8 	bl	8000e80 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	d90b      	bls.n	80012f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2205      	movs	r2, #5
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e012      	b.n	8001318 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e5      	bne.n	80012cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e006      	b.n	8001318 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
  }
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001334:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <HAL_CAN_AddTxMessage+0x2c>
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	2b02      	cmp	r3, #2
 8001348:	f040 80ad 	bne.w	80014a6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10a      	bne.n	800136c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8095 	beq.w	8001496 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	0e1b      	lsrs	r3, r3, #24
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001376:	2201      	movs	r2, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10d      	bne.n	80013a4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	6809      	ldr	r1, [r1, #0]
 8001396:	431a      	orrs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3318      	adds	r3, #24
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	440b      	add	r3, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e00f      	b.n	80013c4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3318      	adds	r3, #24
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	440b      	add	r3, r1
 80013c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6819      	ldr	r1, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3318      	adds	r3, #24
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	440b      	add	r3, r1
 80013d4:	3304      	adds	r3, #4
 80013d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	7d1b      	ldrb	r3, [r3, #20]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d111      	bne.n	8001404 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3318      	adds	r3, #24
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	6811      	ldr	r1, [r2, #0]
 80013f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3318      	adds	r3, #24
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	440b      	add	r3, r1
 8001400:	3304      	adds	r3, #4
 8001402:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3307      	adds	r3, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	061a      	lsls	r2, r3, #24
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3306      	adds	r3, #6
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3305      	adds	r3, #5
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	4313      	orrs	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	3204      	adds	r2, #4
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	4610      	mov	r0, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6811      	ldr	r1, [r2, #0]
 800142c:	ea43 0200 	orr.w	r2, r3, r0
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	440b      	add	r3, r1
 8001436:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800143a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3303      	adds	r3, #3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	061a      	lsls	r2, r3, #24
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3302      	adds	r3, #2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4313      	orrs	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	4610      	mov	r0, r2
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	6811      	ldr	r1, [r2, #0]
 8001462:	ea43 0200 	orr.w	r2, r3, r0
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	440b      	add	r3, r1
 800146c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001470:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3318      	adds	r3, #24
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	6811      	ldr	r1, [r2, #0]
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3318      	adds	r3, #24
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e00e      	b.n	80014b4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e006      	b.n	80014b4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3724      	adds	r7, #36	@ 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d003      	beq.n	80014e4 <HAL_CAN_GetRxMessage+0x24>
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	f040 8103 	bne.w	80016ea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10e      	bne.n	8001508 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d116      	bne.n	8001526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0f7      	b.n	80016f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0e8      	b.n	80016f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	331b      	adds	r3, #27
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0204 	and.w	r2, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10c      	bne.n	800155e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	331b      	adds	r3, #27
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0d5b      	lsrs	r3, r3, #21
 8001554:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00b      	b.n	8001576 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	331b      	adds	r3, #27
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	331b      	adds	r3, #27
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0202 	and.w	r2, r3, #2
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	331b      	adds	r3, #27
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	3304      	adds	r3, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2208      	movs	r2, #8
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	e00b      	b.n	80015c4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	331b      	adds	r3, #27
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	3304      	adds	r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 020f 	and.w	r2, r3, #15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	331b      	adds	r3, #27
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	3304      	adds	r3, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	3304      	adds	r3, #4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0a1a      	lsrs	r2, r3, #8
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	4413      	add	r3, r2
 800162e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0c1a      	lsrs	r2, r3, #16
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	3302      	adds	r3, #2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0e1a      	lsrs	r2, r3, #24
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3303      	adds	r3, #3
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3304      	adds	r3, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0a1a      	lsrs	r2, r3, #8
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3305      	adds	r3, #5
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0c1a      	lsrs	r2, r3, #16
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3306      	adds	r3, #6
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0e1a      	lsrs	r2, r3, #24
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3307      	adds	r3, #7
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e006      	b.n	80016f8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
  }
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001714:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d002      	beq.n	8001722 <HAL_CAN_ActivateNotification+0x1e>
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d109      	bne.n	8001736 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6959      	ldr	r1, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e006      	b.n	8001744 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d07c      	beq.n	8001890 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d023      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f983 	bl	8001abe <HAL_CAN_TxMailbox0CompleteCallback>
 80017b8:	e016      	b.n	80017e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	e00c      	b.n	80017e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	e002      	b.n	80017e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f989 	bl	8001afa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d024      	beq.n	800183c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f963 	bl	8001ad2 <HAL_CAN_TxMailbox1CompleteCallback>
 800180c:	e016      	b.n	800183c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e00c      	b.n	800183c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
 8001834:	e002      	b.n	800183c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f969 	bl	8001b0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d024      	beq.n	8001890 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800184e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f943 	bl	8001ae6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001860:	e016      	b.n	8001890 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	e00c      	b.n	8001890 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	e002      	b.n	8001890 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f949 	bl	8001b22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2210      	movs	r2, #16
 80018b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2208      	movs	r2, #8
 80018ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f93a 	bl	8001b4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f921 	bl	8001b36 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2208      	movs	r2, #8
 8001932:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f91c 	bl	8001b72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f903 	bl	8001b5e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2210      	movs	r2, #16
 8001972:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f906 	bl	8001b86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00b      	beq.n	800199c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2208      	movs	r2, #8
 8001994:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8ff 	bl	8001b9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d07b      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d072      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d043      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03e      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a1e:	2b60      	cmp	r3, #96	@ 0x60
 8001a20:	d02b      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x32a>
 8001a22:	2b60      	cmp	r3, #96	@ 0x60
 8001a24:	d82e      	bhi.n	8001a84 <HAL_CAN_IRQHandler+0x334>
 8001a26:	2b50      	cmp	r3, #80	@ 0x50
 8001a28:	d022      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x320>
 8001a2a:	2b50      	cmp	r3, #80	@ 0x50
 8001a2c:	d82a      	bhi.n	8001a84 <HAL_CAN_IRQHandler+0x334>
 8001a2e:	2b40      	cmp	r3, #64	@ 0x40
 8001a30:	d019      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x316>
 8001a32:	2b40      	cmp	r3, #64	@ 0x40
 8001a34:	d826      	bhi.n	8001a84 <HAL_CAN_IRQHandler+0x334>
 8001a36:	2b30      	cmp	r3, #48	@ 0x30
 8001a38:	d010      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x30c>
 8001a3a:	2b30      	cmp	r3, #48	@ 0x30
 8001a3c:	d822      	bhi.n	8001a84 <HAL_CAN_IRQHandler+0x334>
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d002      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x2f8>
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d005      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a46:	e01d      	b.n	8001a84 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a50:	e019      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a5a:	e014      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a64:	e00f      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a6e:	e00a      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a78:	e005      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a82:	e000      	b.n	8001a86 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f87c 	bl	8001bae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	@ 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	@ (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff3e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff31 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff f844 	bl	8000e80 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d008      	beq.n	8001e18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e052      	b.n	8001ebe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0216 	bic.w	r2, r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <HAL_DMA_Abort+0x62>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0208 	bic.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e68:	e013      	b.n	8001e92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6a:	f7ff f809 	bl	8000e80 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d90c      	bls.n	8001e92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2203      	movs	r2, #3
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e015      	b.n	8001ebe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e4      	bne.n	8001e6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	223f      	movs	r2, #63	@ 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00c      	b.n	8001efe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e16b      	b.n	8002200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 815a 	bne.w	80021fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80b4 	beq.w	80021fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a5f      	ldr	r2, [pc, #380]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a5b      	ldr	r2, [pc, #364]	@ (800221c <HAL_GPIO_Init+0x310>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a51      	ldr	r2, [pc, #324]	@ (8002224 <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a50      	ldr	r2, [pc, #320]	@ (8002228 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x21a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x216>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002234 <HAL_GPIO_Init+0x328>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x212>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4c      	ldr	r2, [pc, #304]	@ (8002238 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4b      	ldr	r2, [pc, #300]	@ (800223c <HAL_GPIO_Init+0x330>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x20a>
 8002112:	2307      	movs	r3, #7
 8002114:	e00e      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002116:	2308      	movs	r3, #8
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211a:	2306      	movs	r3, #6
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	@ (800221c <HAL_GPIO_Init+0x310>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_GPIO_Init+0x334>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a32      	ldr	r2, [pc, #200]	@ (8002240 <HAL_GPIO_Init+0x334>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b30      	ldr	r3, [pc, #192]	@ (8002240 <HAL_GPIO_Init+0x334>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae90 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40021c00 	.word	0x40021c00
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	041a      	lsls	r2, r3, #16
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43d9      	mvns	r1, r3
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	400b      	ands	r3, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f806 	bl	80022dc <HAL_GPIO_EXTI_Callback>
  }
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e267      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b85      	ldr	r3, [pc, #532]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b82      	ldr	r3, [pc, #520]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e242      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b76      	ldr	r3, [pc, #472]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b70      	ldr	r3, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6d      	ldr	r3, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6c      	ldr	r2, [pc, #432]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b69      	ldr	r3, [pc, #420]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a65      	ldr	r2, [pc, #404]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fd68 	bl	8000e80 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fd64 	bl	8000e80 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e207      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fd54 	bl	8000e80 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fd50 	bl	8000e80 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1f3      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	4b4a      	ldr	r3, [pc, #296]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b44      	ldr	r3, [pc, #272]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1c7      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4937      	ldr	r1, [pc, #220]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_OscConfig+0x244>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fd09 	bl	8000e80 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fd05 	bl	8000e80 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1a8      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4925      	ldr	r1, [pc, #148]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_OscConfig+0x244>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fce8 	bl	8000e80 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fce4 	bl	8000e80 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e187      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_RCC_OscConfig+0x248>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fcc8 	bl	8000e80 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fcc4 	bl	8000e80 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e167      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_OscConfig+0x248>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fcb1 	bl	8000e80 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fcad 	bl	8000e80 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d907      	bls.n	8002540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e150      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b88      	ldr	r3, [pc, #544]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ea      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b81      	ldr	r3, [pc, #516]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b7d      	ldr	r3, [pc, #500]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	4a7c      	ldr	r2, [pc, #496]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	@ 0x40
 800257a:	4b7a      	ldr	r3, [pc, #488]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b77      	ldr	r3, [pc, #476]	@ (8002768 <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b74      	ldr	r3, [pc, #464]	@ (8002768 <HAL_RCC_OscConfig+0x474>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a73      	ldr	r2, [pc, #460]	@ (8002768 <HAL_RCC_OscConfig+0x474>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fc6d 	bl	8000e80 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fc69 	bl	8000e80 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e10c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002768 <HAL_RCC_OscConfig+0x474>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x2ea>
 80025d0:	4b64      	ldr	r3, [pc, #400]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	4a63      	ldr	r2, [pc, #396]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	@ 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x30c>
 80025e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 8002600:	4b58      	ldr	r3, [pc, #352]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a57      	ldr	r2, [pc, #348]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
 800260c:	4b55      	ldr	r3, [pc, #340]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a54      	ldr	r2, [pc, #336]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fc2e 	bl	8000e80 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fc2a 	bl	8000e80 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0cb      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b49      	ldr	r3, [pc, #292]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x334>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fc18 	bl	8000e80 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fc14 	bl	8000e80 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0b5      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b3e      	ldr	r3, [pc, #248]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b39      	ldr	r3, [pc, #228]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	4a38      	ldr	r2, [pc, #224]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a1 	beq.w	80027d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002692:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d05c      	beq.n	8002758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d141      	bne.n	800272a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fbe8 	bl	8000e80 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fbe4 	bl	8000e80 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e087      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	491b      	ldr	r1, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fbbd 	bl	8000e80 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fbb9 	bl	8000e80 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e05c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x416>
 8002728:	e054      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fba6 	bl	8000e80 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fba2 	bl	8000e80 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e045      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
 8002756:	e03d      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e038      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000
 800276c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d121      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d11a      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d111      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fad4 	bl	8000e80 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fad0 	bl	8000e80 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fa34 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08003b7c 	.word	0x08003b7c
 80029a8:	20000008 	.word	0x20000008
 80029ac:	2000000c 	.word	0x2000000c

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b4:	b094      	sub	sp, #80	@ 0x50
 80029b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80029bc:	2300      	movs	r3, #0
 80029be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c8:	4b79      	ldr	r3, [pc, #484]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d00d      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	f200 80e1 	bhi.w	8002b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x34>
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x3a>
 80029e2:	e0db      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80029e8:	e0db      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ea:	4b73      	ldr	r3, [pc, #460]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ee:	e0d8      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a06:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	f04f 0000 	mov.w	r0, #0
 8002a2a:	f04f 0100 	mov.w	r1, #0
 8002a2e:	0159      	lsls	r1, r3, #5
 8002a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a34:	0150      	lsls	r0, r2, #5
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	1a51      	subs	r1, r2, r1
 8002a3e:	6139      	str	r1, [r7, #16]
 8002a40:	4629      	mov	r1, r5
 8002a42:	eb63 0301 	sbc.w	r3, r3, r1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a54:	4659      	mov	r1, fp
 8002a56:	018b      	lsls	r3, r1, #6
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5e:	4651      	mov	r1, sl
 8002a60:	018a      	lsls	r2, r1, #6
 8002a62:	4651      	mov	r1, sl
 8002a64:	ebb2 0801 	subs.w	r8, r2, r1
 8002a68:	4659      	mov	r1, fp
 8002a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a82:	4690      	mov	r8, r2
 8002a84:	4699      	mov	r9, r3
 8002a86:	4623      	mov	r3, r4
 8002a88:	eb18 0303 	adds.w	r3, r8, r3
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	462b      	mov	r3, r5
 8002a90:	eb49 0303 	adc.w	r3, r9, r3
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	024b      	lsls	r3, r1, #9
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aac:	4621      	mov	r1, r4
 8002aae:	024a      	lsls	r2, r1, #9
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ac0:	f7fd fb82 	bl	80001c8 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002acc:	e058      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	4611      	mov	r1, r2
 8002ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	f04f 0000 	mov.w	r0, #0
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	0159      	lsls	r1, r3, #5
 8002af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afa:	0150      	lsls	r0, r2, #5
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4641      	mov	r1, r8
 8002b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b06:	4649      	mov	r1, r9
 8002b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b20:	ebb2 040a 	subs.w	r4, r2, sl
 8002b24:	eb63 050b 	sbc.w	r5, r3, fp
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	00eb      	lsls	r3, r5, #3
 8002b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	18e3      	adds	r3, r4, r3
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	464b      	mov	r3, r9
 8002b44:	eb45 0303 	adc.w	r3, r5, r3
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b56:	4629      	mov	r1, r5
 8002b58:	028b      	lsls	r3, r1, #10
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b60:	4621      	mov	r1, r4
 8002b62:	028a      	lsls	r2, r1, #10
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	61fa      	str	r2, [r7, #28]
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	f7fd fb28 	bl	80001c8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3750      	adds	r7, #80	@ 0x50
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000008 	.word	0x20000008

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff0 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0a9b      	lsrs	r3, r3, #10
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08003b8c 	.word	0x08003b8c

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffdc 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0b5b      	lsrs	r3, r3, #13
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08003b8c 	.word	0x08003b8c

08002c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e042      	b.n	8002cbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd ffae 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	@ 0x24
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fcdb 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d112      	bne.n	8002d04 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_UART_Receive_IT+0x26>
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00b      	b.n	8002d06 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 faba 	bl	8003274 <UART_Start_Receive_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	e000      	b.n	8002d06 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0ba      	sub	sp, #232	@ 0xe8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fb99 	bl	80034a6 <UART_Receive_IT>
      return;
 8002d74:	e25b      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80de 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
 8002d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80d1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
 8002da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
 8002dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
 8002dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d011      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 81f2 	beq.w	8003224 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb24 	bl	80034a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_UART_IRQHandler+0x17a>
 8002e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04f      	beq.n	8002f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa2c 	bl	80032e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d141      	bne.n	8002f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1d9      	bne.n	8002e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80030f0 <HAL_UART_IRQHandler+0x3e0>)
 8002ef8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe ffe1 	bl	8001ec6 <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f994 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f990 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f98c 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f36:	e175      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e173      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 814f 	bne.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8148 	beq.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8141 	beq.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	f040 80b6 	bne.w	80030f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8145 	beq.w	8003228 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f080 813e 	bcs.w	8003228 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fbe:	f000 8088 	beq.w	80030d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1d9      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800301e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003032:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003036:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800303a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e1      	bne.n	800300e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800305a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800306e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800307c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e3      	bne.n	800304a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e3      	bne.n	8003090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fe8a 	bl	8001de6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8b7 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ee:	e09b      	b.n	8003228 <HAL_UART_IRQHandler+0x518>
 80030f0:	080033af 	.word	0x080033af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 808e 	beq.w	800322c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8089 	beq.w	800322c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800313e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e3      	bne.n	800311a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	623b      	str	r3, [r7, #32]
   return(result);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003176:	633a      	str	r2, [r7, #48]	@ 0x30
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800317c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031bc:	61fa      	str	r2, [r7, #28]
 80031be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e3      	bne.n	8003198 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f83d 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031e2:	e023      	b.n	800322c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_UART_IRQHandler+0x4f4>
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8ea 	bl	80033d6 <UART_Transmit_IT>
    return;
 8003202:	e014      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <HAL_UART_IRQHandler+0x51e>
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f92a 	bl	8003476 <UART_EndTransmit_IT>
    return;
 8003222:	e004      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
    return;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
      return;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
      return;
 800322c:	bf00      	nop
  }
}
 800322e:	37e8      	adds	r7, #232	@ 0xe8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2222      	movs	r2, #34	@ 0x22
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b095      	sub	sp, #84	@ 0x54
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003310:	643a      	str	r2, [r7, #64]	@ 0x40
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	61fb      	str	r3, [r7, #28]
   return(result);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3314      	adds	r3, #20
 8003342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800334a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d119      	bne.n	8003394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f023 0310 	bic.w	r3, r3, #16
 8003376:	647b      	str	r3, [r7, #68]	@ 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003380:	61ba      	str	r2, [r7, #24]
 8003382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6979      	ldr	r1, [r7, #20]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	613b      	str	r3, [r7, #16]
   return(result);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033a2:	bf00      	nop
 80033a4:	3754      	adds	r7, #84	@ 0x54
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff ff3d 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b21      	cmp	r3, #33	@ 0x21
 80033e8:	d13e      	bne.n	8003468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d114      	bne.n	800341e <UART_Transmit_IT+0x48>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d110      	bne.n	800341e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e008      	b.n	8003430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6211      	str	r1, [r2, #32]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4619      	mov	r1, r3
 800343e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800348c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fecc 	bl	8003234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08c      	sub	sp, #48	@ 0x30
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b22      	cmp	r3, #34	@ 0x22
 80034b8:	f040 80ae 	bne.w	8003618 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c4:	d117      	bne.n	80034f6 <UART_Receive_IT+0x50>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034f4:	e026      	b.n	8003544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d007      	beq.n	800351a <UART_Receive_IT+0x74>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <UART_Receive_IT+0x82>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e008      	b.n	800353a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003534:	b2da      	uxtb	r2, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29b      	uxth	r3, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4619      	mov	r1, r3
 8003552:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003554:	2b00      	cmp	r3, #0
 8003556:	d15d      	bne.n	8003614 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0220 	bic.w	r2, r2, #32
 8003566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	2b01      	cmp	r3, #1
 800359c:	d135      	bne.n	800360a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	613b      	str	r3, [r7, #16]
   return(result);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 0310 	bic.w	r3, r3, #16
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	623a      	str	r2, [r7, #32]
 80035c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e5      	bne.n	80035a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d10a      	bne.n	80035fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fe2a 	bl	800325c <HAL_UARTEx_RxEventCallback>
 8003608:	e002      	b.n	8003610 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f9d2 	bl	80009b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e002      	b.n	800361a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3730      	adds	r7, #48	@ 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b0c0      	sub	sp, #256	@ 0x100
 800362a:	af00      	add	r7, sp, #0
 800362c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800367c:	f021 010c 	bic.w	r1, r1, #12
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800368a:	430b      	orrs	r3, r1
 800368c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	ea40 0301 	orr.w	r3, r0, r1
 80036aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b8f      	ldr	r3, [pc, #572]	@ (80038f0 <UART_SetConfig+0x2cc>)
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d005      	beq.n	80036c4 <UART_SetConfig+0xa0>
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b8d      	ldr	r3, [pc, #564]	@ (80038f4 <UART_SetConfig+0x2d0>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff fa9a 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80036c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036cc:	e003      	b.n	80036d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ce:	f7ff fa81 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80036d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e0:	f040 810c 	bne.w	80038fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036fe:	415b      	adcs	r3, r3
 8003700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003706:	4621      	mov	r1, r4
 8003708:	eb12 0801 	adds.w	r8, r2, r1
 800370c:	4629      	mov	r1, r5
 800370e:	eb43 0901 	adc.w	r9, r3, r1
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003726:	4690      	mov	r8, r2
 8003728:	4699      	mov	r9, r3
 800372a:	4623      	mov	r3, r4
 800372c:	eb18 0303 	adds.w	r3, r8, r3
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003734:	462b      	mov	r3, r5
 8003736:	eb49 0303 	adc.w	r3, r9, r3
 800373a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800374a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800374e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003752:	460b      	mov	r3, r1
 8003754:	18db      	adds	r3, r3, r3
 8003756:	653b      	str	r3, [r7, #80]	@ 0x50
 8003758:	4613      	mov	r3, r2
 800375a:	eb42 0303 	adc.w	r3, r2, r3
 800375e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003768:	f7fc fd2e 	bl	80001c8 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003784:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003794:	415b      	adcs	r3, r3
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800379c:	4641      	mov	r1, r8
 800379e:	eb12 0a01 	adds.w	sl, r2, r1
 80037a2:	4649      	mov	r1, r9
 80037a4:	eb43 0b01 	adc.w	fp, r3, r1
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037bc:	4692      	mov	sl, r2
 80037be:	469b      	mov	fp, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	eb1a 0303 	adds.w	r3, sl, r3
 80037c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ca:	464b      	mov	r3, r9
 80037cc:	eb4b 0303 	adc.w	r3, fp, r3
 80037d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037e8:	460b      	mov	r3, r1
 80037ea:	18db      	adds	r3, r3, r3
 80037ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ee:	4613      	mov	r3, r2
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037fe:	f7fc fce3 	bl	80001c8 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4611      	mov	r1, r2
 8003808:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <UART_SetConfig+0x2d4>)
 800380a:	fba3 2301 	umull	r2, r3, r3, r1
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2264      	movs	r2, #100	@ 0x64
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800381e:	4b36      	ldr	r3, [pc, #216]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003820:	fba3 2302 	umull	r2, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800382c:	441c      	add	r4, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003838:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800383c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003848:	415b      	adcs	r3, r3
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6339      	str	r1, [r7, #48]	@ 0x30
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800389c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038a4:	460b      	mov	r3, r1
 80038a6:	18db      	adds	r3, r3, r3
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038aa:	4613      	mov	r3, r2
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ba:	f7fc fc85 	bl	80001c8 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	@ 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	3332      	adds	r3, #50	@ 0x32
 80038d6:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4422      	add	r2, r4
 80038ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038ec:	e106      	b.n	8003afc <UART_SetConfig+0x4d8>
 80038ee:	bf00      	nop
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003906:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800390a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800390e:	4642      	mov	r2, r8
 8003910:	464b      	mov	r3, r9
 8003912:	1891      	adds	r1, r2, r2
 8003914:	6239      	str	r1, [r7, #32]
 8003916:	415b      	adcs	r3, r3
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800391e:	4641      	mov	r1, r8
 8003920:	1854      	adds	r4, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0501 	adc.w	r5, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	00eb      	lsls	r3, r5, #3
 8003932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003936:	00e2      	lsls	r2, r4, #3
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	4643      	mov	r3, r8
 800393e:	18e3      	adds	r3, r4, r3
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003944:	464b      	mov	r3, r9
 8003946:	eb45 0303 	adc.w	r3, r5, r3
 800394a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800396a:	4629      	mov	r1, r5
 800396c:	008b      	lsls	r3, r1, #2
 800396e:	4621      	mov	r1, r4
 8003970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003974:	4621      	mov	r1, r4
 8003976:	008a      	lsls	r2, r1, #2
 8003978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800397c:	f7fc fc24 	bl	80001c8 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	011c      	lsls	r4, r3, #4
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800399c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	61b9      	str	r1, [r7, #24]
 80039a8:	415b      	adcs	r3, r3
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b0:	4641      	mov	r1, r8
 80039b2:	1851      	adds	r1, r2, r1
 80039b4:	6139      	str	r1, [r7, #16]
 80039b6:	4649      	mov	r1, r9
 80039b8:	414b      	adcs	r3, r1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c8:	4659      	mov	r1, fp
 80039ca:	00cb      	lsls	r3, r1, #3
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d2:	4651      	mov	r1, sl
 80039d4:	00ca      	lsls	r2, r1, #3
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	4642      	mov	r2, r8
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e4:	464b      	mov	r3, r9
 80039e6:	460a      	mov	r2, r1
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a08:	4649      	mov	r1, r9
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a12:	4641      	mov	r1, r8
 8003a14:	008a      	lsls	r2, r1, #2
 8003a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a1a:	f7fc fbd5 	bl	80001c8 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b38      	ldr	r3, [pc, #224]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	@ 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	3332      	adds	r3, #50	@ 0x32
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a44:	441c      	add	r4, r3
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a96:	464b      	mov	r3, r9
 8003a98:	460a      	mov	r2, r1
 8003a9a:	eb42 0303 	adc.w	r3, r2, r3
 8003a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ab8:	4649      	mov	r1, r9
 8003aba:	008b      	lsls	r3, r1, #2
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	008a      	lsls	r2, r1, #2
 8003ac6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aca:	f7fc fb7d 	bl	80001c8 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2164      	movs	r1, #100	@ 0x64
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	@ 0x32
 8003ae6:	4a08      	ldr	r2, [pc, #32]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4422      	add	r2, r4
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b02:	46bd      	mov	sp, r7
 8003b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <memset>:
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	@ (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f818 	bl	8003b64 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003b9c 	.word	0x08003b9c
 8003b58:	08003b9c 	.word	0x08003b9c
 8003b5c:	08003b9c 	.word	0x08003b9c
 8003b60:	08003ba0 	.word	0x08003ba0

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
